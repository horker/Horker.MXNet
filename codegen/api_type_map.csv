"Name","ReturnType","BriefDescription","DetailedDescription","ParamType","ParamName","ParamDescription","infer_prefix","infer_baseType","infer_clrType"
"MXGetLastError","string","return str message of the last error all function in this file will return 0 when success and -1 when an error occured, MXGetLastError can be called to retrieve the error ","this function is threadsafe and can be called by different thread error info ","","","","","",""
"MXLoadLib","int","Load library dynamically. ","pathto the library .so file 0 when success, -1 when failure happens. ","const char*","path","to the library .so file ","","const char*","string"
"MXLibInfoFeatures","int","Get list of features supported on the runtime. ","libFeaturepointer to array of LibFeaturesizeof the array 0 when success, -1 when failure happens. ","const struct LibFeature**","libFeature","pointer to array of LibFeature","","const struct LibFeature**","IntPtr"
"MXLibInfoFeatures","int","Get list of features supported on the runtime. ","libFeaturepointer to array of LibFeaturesizeof the array 0 when success, -1 when failure happens. ","size_t*","size","pointer to array of LibFeature","","size_t*","IntPtr"
"MXRandomSeed","int","Seed all global random number generators in mxnet. ","seedthe random number seed. 0 when success, -1 when failure happens. ","int","seed","the random number seed. ","","int","int"
"MXRandomSeedContext","int","Seed the global random number generator of the given device. ","seedthe random number seed. 0 when success, -1 when failure happens. ","int","seed","the random number seed. ","","int","int"
"MXRandomSeedContext","int","Seed the global random number generator of the given device. ","seedthe random number seed. 0 when success, -1 when failure happens. ","int","dev_type","the random number seed. ","","int","int"
"MXRandomSeedContext","int","Seed the global random number generator of the given device. ","seedthe random number seed. 0 when success, -1 when failure happens. ","int","dev_id","the random number seed. ","","int","int"
"MXNotifyShutdown","int","Notify the engine about a shutdown, This can help engine to print less messages into display. ","User do not have to call this function. 0 when success, -1 when failure happens. ","","","","","",""
"MXSetProcessProfilerConfig","int","Set up configuration of profiler for the process passed as profile_process in keys. ","num_paramsNumber of parameters keysarray of parameter keys valsarray of parameter values kvstoreHandlehandle to kvstore 0 when success, -1 when failure happens. ","int","num_params","Number of parameters ","","int","int"
"MXSetProcessProfilerConfig","int","Set up configuration of profiler for the process passed as profile_process in keys. ","num_paramsNumber of parameters keysarray of parameter keys valsarray of parameter values kvstoreHandlehandle to kvstore 0 when success, -1 when failure happens. ","const char*const*","keys","Number of parameters ","","const char*const*","IntPtr"
"MXSetProcessProfilerConfig","int","Set up configuration of profiler for the process passed as profile_process in keys. ","num_paramsNumber of parameters keysarray of parameter keys valsarray of parameter values kvstoreHandlehandle to kvstore 0 when success, -1 when failure happens. ","const char*const*","vals","Number of parameters ","","const char*const*","IntPtr"
"MXSetProcessProfilerConfig","int","Set up configuration of profiler for the process passed as profile_process in keys. ","num_paramsNumber of parameters keysarray of parameter keys valsarray of parameter values kvstoreHandlehandle to kvstore 0 when success, -1 when failure happens. ","KVStoreHandle","kvstoreHandle","Number of parameters ","","KVStoreHandle","KVStoreHandle"
"MXSetProfilerConfig","int","Set up configuration of profiler for worker/current process. ","num_paramsNumber of parameters keysarray of parameter keys valsarray of parameter values 0 when success, -1 when failure happens. ","int","num_params","Number of parameters ","","int","int"
"MXSetProfilerConfig","int","Set up configuration of profiler for worker/current process. ","num_paramsNumber of parameters keysarray of parameter keys valsarray of parameter values 0 when success, -1 when failure happens. ","const char*const*","keys","Number of parameters ","","const char*const*","IntPtr"
"MXSetProfilerConfig","int","Set up configuration of profiler for worker/current process. ","num_paramsNumber of parameters keysarray of parameter keys valsarray of parameter values 0 when success, -1 when failure happens. ","const char*const*","vals","Number of parameters ","","const char*const*","IntPtr"
"MXSetProcessProfilerState","int","Set up state of profiler for either worker or server process. ","stateindicate the working state of profiler, profiler not running when state == 0, profiler running when state == 1 profile_processan int, when 0 command is for worker/current process, when 1 command is for server process kvstoreHandlehandle to kvstore, needed for server process profiling 0 when success, -1 when failure happens. ","int","state","indicate the working state of profiler, profiler not running when state == 0, profiler running when state == 1 ","","int","int"
"MXSetProcessProfilerState","int","Set up state of profiler for either worker or server process. ","stateindicate the working state of profiler, profiler not running when state == 0, profiler running when state == 1 profile_processan int, when 0 command is for worker/current process, when 1 command is for server process kvstoreHandlehandle to kvstore, needed for server process profiling 0 when success, -1 when failure happens. ","int","profile_process","indicate the working state of profiler, profiler not running when state == 0, profiler running when state == 1 ","","int","int"
"MXSetProcessProfilerState","int","Set up state of profiler for either worker or server process. ","stateindicate the working state of profiler, profiler not running when state == 0, profiler running when state == 1 profile_processan int, when 0 command is for worker/current process, when 1 command is for server process kvstoreHandlehandle to kvstore, needed for server process profiling 0 when success, -1 when failure happens. ","KVStoreHandle","kvStoreHandle","","","KVStoreHandle","KVStoreHandle"
"MXSetProfilerState","int","Set up state of profiler for current process. ","stateindicate the working state of profiler, profiler not running when state == 0, profiler running when state == 1 0 when success, -1 when failure happens. ","int","state","indicate the working state of profiler, profiler not running when state == 0, profiler running when state == 1 ","","int","int"
"MXDumpProcessProfile","int","Save profile and stop profiler. ","finishedtrue if stat output should stop after this point profile_processan int, when 0 command is for worker/current process, when 1 command is for server process kvstoreHandlehandle to kvstore 0 when success, -1 when failure happens. ","int","finished","true if stat output should stop after this point ","","int","int"
"MXDumpProcessProfile","int","Save profile and stop profiler. ","finishedtrue if stat output should stop after this point profile_processan int, when 0 command is for worker/current process, when 1 command is for server process kvstoreHandlehandle to kvstore 0 when success, -1 when failure happens. ","int","profile_process","true if stat output should stop after this point ","","int","int"
"MXDumpProcessProfile","int","Save profile and stop profiler. ","finishedtrue if stat output should stop after this point profile_processan int, when 0 command is for worker/current process, when 1 command is for server process kvstoreHandlehandle to kvstore 0 when success, -1 when failure happens. ","KVStoreHandle","kvStoreHandle","","","KVStoreHandle","KVStoreHandle"
"MXDumpProfile","int","Save profile and stop profiler for worker/current process. ","finishedtrue if stat output should stop after this point 0 when success, -1 when failure happens. ","int","finished","true if stat output should stop after this point ","","int","int"
"MXAggregateProfileStatsPrint","int","Deprecated, use MXAggregateProfileStatsPrintEx instead. ","out_strWill receive a pointer to the output string resetClear the aggregate stats after printing 0 when success, -1 when failure happens. ","const char**","out_str","Will receive a pointer to the output string ","out","const char*","IntPtr"
"MXAggregateProfileStatsPrint","int","Deprecated, use MXAggregateProfileStatsPrintEx instead. ","out_strWill receive a pointer to the output string resetClear the aggregate stats after printing 0 when success, -1 when failure happens. ","int","reset","Will receive a pointer to the output string ","","int","int"
"MXAggregateProfileStatsPrintEx","int","Print sorted aggregate stats to the a string How aggregate stats are stored will not change. ","out_strwill receive a pointer to the output string resetclear the aggregate stats after printing formatwhether to return in tabular or json format sort_bysort by avg, min, max, or count ascendingwhether to sort ascendingly 0 when success, -1 when failure happens. ","const char**","out_str","will receive a pointer to the output string ","out","const char*","IntPtr"
"MXAggregateProfileStatsPrintEx","int","Print sorted aggregate stats to the a string How aggregate stats are stored will not change. ","out_strwill receive a pointer to the output string resetclear the aggregate stats after printing formatwhether to return in tabular or json format sort_bysort by avg, min, max, or count ascendingwhether to sort ascendingly 0 when success, -1 when failure happens. ","int","reset","will receive a pointer to the output string ","","int","int"
"MXAggregateProfileStatsPrintEx","int","Print sorted aggregate stats to the a string How aggregate stats are stored will not change. ","out_strwill receive a pointer to the output string resetclear the aggregate stats after printing formatwhether to return in tabular or json format sort_bysort by avg, min, max, or count ascendingwhether to sort ascendingly 0 when success, -1 when failure happens. ","int","format","will receive a pointer to the output string ","","int","int"
"MXAggregateProfileStatsPrintEx","int","Print sorted aggregate stats to the a string How aggregate stats are stored will not change. ","out_strwill receive a pointer to the output string resetclear the aggregate stats after printing formatwhether to return in tabular or json format sort_bysort by avg, min, max, or count ascendingwhether to sort ascendingly 0 when success, -1 when failure happens. ","int","sort_by","will receive a pointer to the output string ","","int","int"
"MXAggregateProfileStatsPrintEx","int","Print sorted aggregate stats to the a string How aggregate stats are stored will not change. ","out_strwill receive a pointer to the output string resetclear the aggregate stats after printing formatwhether to return in tabular or json format sort_bysort by avg, min, max, or count ascendingwhether to sort ascendingly 0 when success, -1 when failure happens. ","int","ascending","will receive a pointer to the output string ","","int","int"
"MXProcessProfilePause","int","Pause profiler tuning collection. ","pausedIf nonzero, profiling pauses. Otherwise, profiling resumes/continues profile_processinteger which denotes whether to process worker or server process kvstoreHandlehandle to kvstore 0 when success, -1 when failure happens. pausing and resuming is global and not recursive ","int","paused","If nonzero, profiling pauses. Otherwise, profiling resumes/continues ","","int","int"
"MXProcessProfilePause","int","Pause profiler tuning collection. ","pausedIf nonzero, profiling pauses. Otherwise, profiling resumes/continues profile_processinteger which denotes whether to process worker or server process kvstoreHandlehandle to kvstore 0 when success, -1 when failure happens. pausing and resuming is global and not recursive ","int","profile_process","If nonzero, profiling pauses. Otherwise, profiling resumes/continues ","","int","int"
"MXProcessProfilePause","int","Pause profiler tuning collection. ","pausedIf nonzero, profiling pauses. Otherwise, profiling resumes/continues profile_processinteger which denotes whether to process worker or server process kvstoreHandlehandle to kvstore 0 when success, -1 when failure happens. pausing and resuming is global and not recursive ","KVStoreHandle","kvStoreHandle","","","KVStoreHandle","KVStoreHandle"
"MXProfilePause","int","Pause profiler tuning collection for worker/current process. ","pausedIf nonzero, profiling pauses. Otherwise, profiling resumes/continues 0 when success, -1 when failure happens. pausing and resuming is global and not recursive ","int","paused","If nonzero, profiling pauses. Otherwise, profiling resumes/continues ","","int","int"
"MXProfileCreateDomain","int","Create profiling domain. ","domainString representing the domain name to create outReturn domain object 0 when success, -1 when failure happens. ","const char*","domain","String representing the domain name to create ","","const char*","string"
"MXProfileCreateDomain","int","Create profiling domain. ","domainString representing the domain name to create outReturn domain object 0 when success, -1 when failure happens. ","ProfileHandle*","out","String representing the domain name to create ","out","ProfileHandle","ProfileHandle"
"MXProfileCreateTask","int","Create profile task. ","nameName of the task domainDomain of the task outOutput handle 0 when success, -1 when failure happens. ","ProfileHandle","domain","Name of the task ","","ProfileHandle","ProfileHandle"
"MXProfileCreateTask","int","Create profile task. ","nameName of the task domainDomain of the task outOutput handle 0 when success, -1 when failure happens. ","const char*","task_name","","","const char*","string"
"MXProfileCreateTask","int","Create profile task. ","nameName of the task domainDomain of the task outOutput handle 0 when success, -1 when failure happens. ","ProfileHandle*","out","Name of the task ","out","ProfileHandle","ProfileHandle"
"MXProfileCreateFrame","int","Create profile frame. ","nameName of the frame domainDomain of the frame outOutput handle 0 when success, -1 when failure happens. ","ProfileHandle","domain","Name of the frame ","","ProfileHandle","ProfileHandle"
"MXProfileCreateFrame","int","Create profile frame. ","nameName of the frame domainDomain of the frame outOutput handle 0 when success, -1 when failure happens. ","const char*","frame_name","","","const char*","string"
"MXProfileCreateFrame","int","Create profile frame. ","nameName of the frame domainDomain of the frame outOutput handle 0 when success, -1 when failure happens. ","ProfileHandle*","out","Name of the frame ","out","ProfileHandle","ProfileHandle"
"MXProfileCreateEvent","int","Create profile event. ","nameName of the event outOutput handle 0 when success, -1 when failure happens. ","const char*","event_name","","","const char*","string"
"MXProfileCreateEvent","int","Create profile event. ","nameName of the event outOutput handle 0 when success, -1 when failure happens. ","ProfileHandle*","out","Name of the event ","out","ProfileHandle","ProfileHandle"
"MXProfileCreateCounter","int","Create profile counter. ","nameName of the counter domainDomain of the counter outOutput handle 0 when success, -1 when failure happens. ","ProfileHandle","domain","Name of the counter ","","ProfileHandle","ProfileHandle"
"MXProfileCreateCounter","int","Create profile counter. ","nameName of the counter domainDomain of the counter outOutput handle 0 when success, -1 when failure happens. ","const char*","counter_name","","","const char*","string"
"MXProfileCreateCounter","int","Create profile counter. ","nameName of the counter domainDomain of the counter outOutput handle 0 when success, -1 when failure happens. ","ProfileHandle*","out","Name of the counter ","out","ProfileHandle","ProfileHandle"
"MXProfileDestroyHandle","int","Destroy a frame. ","frame_handleHandle to frame to destroy 0 when success, -1 when failure happens. ","ProfileHandle","frame_handle","Handle to frame to destroy ","","ProfileHandle","ProfileHandle"
"MXProfileDurationStart","int","Start timing the duration of a profile duration object such as an event, task or frame. ","duration_handlehandle to the duration object 0 when success, -1 when failure happens. ","ProfileHandle","duration_handle","handle to the duration object ","","ProfileHandle","ProfileHandle"
"MXProfileDurationStop","int","Stop timing the duration of a profile duration object such as an event, task or frame. ","duration_handlehandle to the duration object 0 when success, -1 when failure happens. ","ProfileHandle","duration_handle","handle to the duration object ","","ProfileHandle","ProfileHandle"
"MXProfileSetCounter","int","Set a counter, given its handle. ","counter_handleHandle to counter to set valueValue to set the counter to (64-bit unsigned integer) 0 when success, -1 when failure happens. ","ProfileHandle","counter_handle","Handle to counter to set ","","ProfileHandle","ProfileHandle"
"MXProfileSetCounter","int","Set a counter, given its handle. ","counter_handleHandle to counter to set valueValue to set the counter to (64-bit unsigned integer) 0 when success, -1 when failure happens. ","uint64_t","value","Handle to counter to set ","","uint64_t","uint64_t"
"MXProfileAdjustCounter","int","Adjust a counter by the given amount, given its handle. ","counter_handleHandle to counter to adjust valueValue to adjust the counter by (64-bit signed integer) 0 when success, -1 when failure happens. ","ProfileHandle","counter_handle","Handle to counter to adjust ","","ProfileHandle","ProfileHandle"
"MXProfileAdjustCounter","int","Adjust a counter by the given amount, given its handle. ","counter_handleHandle to counter to adjust valueValue to adjust the counter by (64-bit signed integer) 0 when success, -1 when failure happens. ","int64_t","value","Handle to counter to adjust ","","int64_t","int64_t"
"MXProfileSetMarker","int","Mark a single instant in time. ","domainDomain of the marker instant_marker_nameName of the marker scopeScope of marker ('global', 'process', 'thread', 'task', 'marker') 0 when success, -1 when failure happens. ","ProfileHandle","domain","Domain of the marker ","","ProfileHandle","ProfileHandle"
"MXProfileSetMarker","int","Mark a single instant in time. ","domainDomain of the marker instant_marker_nameName of the marker scopeScope of marker ('global', 'process', 'thread', 'task', 'marker') 0 when success, -1 when failure happens. ","const char*","instant_marker_name","Domain of the marker ","","const char*","string"
"MXProfileSetMarker","int","Mark a single instant in time. ","domainDomain of the marker instant_marker_nameName of the marker scopeScope of marker ('global', 'process', 'thread', 'task', 'marker') 0 when success, -1 when failure happens. ","const char*","scope","Domain of the marker ","","const char*","string"
"MXSetNumOMPThreads","int","Set the number of OMP threads to use. ","thread_numNumber of OMP threads desired 0 when success, -1 when failure happens. ","int","thread_num","Number of OMP threads desired ","","int","int"
"MXEngineSetBulkSize","int","set bulk execution limit ","bulk_sizenew bulk_size prev_bulk_sizeprevious bulk_size ","int","bulk_size","new bulk_size ","","int","int"
"MXEngineSetBulkSize","int","set bulk execution limit ","bulk_sizenew bulk_size prev_bulk_sizeprevious bulk_size ","int*","prev_bulk_size","new bulk_size ","","int*","IntPtr"
"MXGetGPUCount","int","Get the number of GPUs. ","pointerto int that will hold the number of GPUs available. 0 when success, -1 when failure happens. ","int*","out","to int that will hold the number of GPUs available. ","out","int","int"
"MXGetGPUMemoryInformation","int","get the free and total available memory on a GPU Note: Deprecated, use MXGetGPUMemoryInformation64 instead. ","devthe GPU number to query free_mempointer to the integer holding free GPU memory total_mempointer to the integer holding total GPU memory 0 when success, -1 when failure happens ","int","dev","the GPU number to query ","","int","int"
"MXGetGPUMemoryInformation","int","get the free and total available memory on a GPU Note: Deprecated, use MXGetGPUMemoryInformation64 instead. ","devthe GPU number to query free_mempointer to the integer holding free GPU memory total_mempointer to the integer holding total GPU memory 0 when success, -1 when failure happens ","int*","free_mem","the GPU number to query ","out","int","int"
"MXGetGPUMemoryInformation","int","get the free and total available memory on a GPU Note: Deprecated, use MXGetGPUMemoryInformation64 instead. ","devthe GPU number to query free_mempointer to the integer holding free GPU memory total_mempointer to the integer holding total GPU memory 0 when success, -1 when failure happens ","int*","total_mem","the GPU number to query ","out","int","int"
"MXGetGPUMemoryInformation64","int","get the free and total available memory on a GPU ","devthe GPU number to query free_mempointer to the uint64_t holding free GPU memory total_mempointer to the uint64_t holding total GPU memory 0 when success, -1 when failure happens ","int","dev","the GPU number to query ","","int","int"
"MXGetGPUMemoryInformation64","int","get the free and total available memory on a GPU ","devthe GPU number to query free_mempointer to the uint64_t holding free GPU memory total_mempointer to the uint64_t holding total GPU memory 0 when success, -1 when failure happens ","uint64_t*","free_mem","the GPU number to query ","out","uint64_t","uint64_t"
"MXGetGPUMemoryInformation64","int","get the free and total available memory on a GPU ","devthe GPU number to query free_mempointer to the uint64_t holding free GPU memory total_mempointer to the uint64_t holding total GPU memory 0 when success, -1 when failure happens ","uint64_t*","total_mem","the GPU number to query ","out","uint64_t","uint64_t"
"MXGetVersion","int","get the MXNet library version as an integer ","pointerto the integer holding the version number 0 when success, -1 when failure happens ","int*","out","to the integer holding the version number ","out","int","int"
"MXNDArrayCreateNone","int","Load TVM operator from the binary library. ","libpathTVM operators lib file 0 when success, -1 when failure happens
create a NDArray handle that is not initialized can be used to pass in as mutate variables to hold the result of NDArray outthe returning handle 0 when success, -1 when failure happens ","NDArrayHandle*","out","TVM operators lib file ","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayCreate","int","create a NDArray with specified shape ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated outthe returning handle 0 when success, -1 when failure happens ","const mx_uint*","shape","the pointer to the shape ","","const mx_uint*","mx_uint[]"
"MXNDArrayCreate","int","create a NDArray with specified shape ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated outthe returning handle 0 when success, -1 when failure happens ","mx_uint","ndim","the pointer to the shape ","","mx_uint","mx_uint"
"MXNDArrayCreate","int","create a NDArray with specified shape ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated outthe returning handle 0 when success, -1 when failure happens ","int","dev_type","the pointer to the shape ","","int","int"
"MXNDArrayCreate","int","create a NDArray with specified shape ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated outthe returning handle 0 when success, -1 when failure happens ","int","dev_id","the pointer to the shape ","","int","int"
"MXNDArrayCreate","int","create a NDArray with specified shape ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated outthe returning handle 0 when success, -1 when failure happens ","int","delay_alloc","the pointer to the shape ","","int","int"
"MXNDArrayCreate","int","create a NDArray with specified shape ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated outthe returning handle 0 when success, -1 when failure happens ","NDArrayHandle*","out","the pointer to the shape ","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayCreateEx","int","create a NDArray with specified shape and data type ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array outthe returning handle 0 when success, -1 when failure happens ","const mx_uint*","shape","the pointer to the shape ","","const mx_uint*","mx_uint[]"
"MXNDArrayCreateEx","int","create a NDArray with specified shape and data type ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array outthe returning handle 0 when success, -1 when failure happens ","mx_uint","ndim","the pointer to the shape ","","mx_uint","mx_uint"
"MXNDArrayCreateEx","int","create a NDArray with specified shape and data type ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array outthe returning handle 0 when success, -1 when failure happens ","int","dev_type","the pointer to the shape ","","int","int"
"MXNDArrayCreateEx","int","create a NDArray with specified shape and data type ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array outthe returning handle 0 when success, -1 when failure happens ","int","dev_id","the pointer to the shape ","","int","int"
"MXNDArrayCreateEx","int","create a NDArray with specified shape and data type ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array outthe returning handle 0 when success, -1 when failure happens ","int","delay_alloc","the pointer to the shape ","","int","int"
"MXNDArrayCreateEx","int","create a NDArray with specified shape and data type ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array outthe returning handle 0 when success, -1 when failure happens ","int","dtype","the pointer to the shape ","","int","int"
"MXNDArrayCreateEx","int","create a NDArray with specified shape and data type ","shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array outthe returning handle 0 when success, -1 when failure happens ","NDArrayHandle*","out","the pointer to the shape ","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayCreateEx64","int","","","const mx_int64*","shape","","","const mx_int64*","mx_int64[]"
"MXNDArrayCreateEx64","int","","","int","ndim","","","int","int"
"MXNDArrayCreateEx64","int","","","int","dev_type","","","int","int"
"MXNDArrayCreateEx64","int","","","int","dev_id","","","int","int"
"MXNDArrayCreateEx64","int","","","int","delay_alloc","","","int","int"
"MXNDArrayCreateEx64","int","","","int","dtype","","","int","int"
"MXNDArrayCreateEx64","int","","","NDArrayHandle*","out","","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","int","storage_type","the storage type of the ndarray ","","int","int"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","const mx_uint*","shape","the storage type of the ndarray ","","const mx_uint*","mx_uint[]"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","mx_uint","ndim","the storage type of the ndarray ","","mx_uint","mx_uint"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","int","dev_type","the storage type of the ndarray ","","int","int"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","int","dev_id","the storage type of the ndarray ","","int","int"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","int","delay_alloc","the storage type of the ndarray ","","int","int"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","int","dtype","the storage type of the ndarray ","","int","int"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","mx_uint","num_aux","the storage type of the ndarray ","","mx_uint","mx_uint"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","int*","aux_type","the storage type of the ndarray ","","int*","IntPtr"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","mx_uint*","aux_ndims","the storage type of the ndarray ","","mx_uint*","IntPtr"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","const mx_uint*","aux_shape","the storage type of the ndarray ","","const mx_uint*","mx_uint[]"
"MXNDArrayCreateSparseEx","int","create an empty sparse NDArray with specified shape and data type ","storage_typethe storage type of the ndarray shapethe pointer to the shape ndimthe dimension of the shape dev_typedevice type, specify device we want to take dev_idthe device id of the specific device delay_allocwhether to delay allocation until the narray is first mutated dtypedata type of created array num_auxthe number of aux data to support this ndarray aux_typedata type of the aux data for the created array aux_ndimsthe dimension of the shapes of aux data aux_shapethe shapes of aux data outthe returning handle 0 when success, -1 when failure happens ","NDArrayHandle*","out","the storage type of the ndarray ","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayCreateSparseEx64","int","","","int","storage_type","","","int","int"
"MXNDArrayCreateSparseEx64","int","","","const mx_int64*","shape","","","const mx_int64*","mx_int64[]"
"MXNDArrayCreateSparseEx64","int","","","int","ndim","","","int","int"
"MXNDArrayCreateSparseEx64","int","","","int","dev_type","","","int","int"
"MXNDArrayCreateSparseEx64","int","","","int","dev_id","","","int","int"
"MXNDArrayCreateSparseEx64","int","","","int","delay_alloc","","","int","int"
"MXNDArrayCreateSparseEx64","int","","","int","dtype","","","int","int"
"MXNDArrayCreateSparseEx64","int","","","mx_uint","num_aux","","","mx_uint","mx_uint"
"MXNDArrayCreateSparseEx64","int","","","int*","aux_type","","","int*","IntPtr"
"MXNDArrayCreateSparseEx64","int","","","int*","aux_ndims","","","int*","IntPtr"
"MXNDArrayCreateSparseEx64","int","","","const mx_int64*","aux_shape","","","const mx_int64*","mx_int64[]"
"MXNDArrayCreateSparseEx64","int","","","NDArrayHandle*","out","","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayLoadFromRawBytes","int","create a NDArray handle that is loaded from raw bytes. ","bufthe head of the raw bytes sizesize of the raw bytes outthe returning handle 0 when success, -1 when failure happens ","const void*","buf","the head of the raw bytes ","","const void*","IntPtr"
"MXNDArrayLoadFromRawBytes","int","create a NDArray handle that is loaded from raw bytes. ","bufthe head of the raw bytes sizesize of the raw bytes outthe returning handle 0 when success, -1 when failure happens ","size_t","size","the head of the raw bytes ","","size_t","size_t"
"MXNDArrayLoadFromRawBytes","int","create a NDArray handle that is loaded from raw bytes. ","bufthe head of the raw bytes sizesize of the raw bytes outthe returning handle 0 when success, -1 when failure happens ","NDArrayHandle*","out","the head of the raw bytes ","out","NDArrayHandle","NDArrayHandle"
"MXNDArraySaveRawBytes","int","save the NDArray into raw bytes. ","handlethe NDArray handle out_sizesize of the raw bytes out_bufthe head of returning memory bytes. 0 when success, -1 when failure happens ","NDArrayHandle","handle","the NDArray handle ","","NDArrayHandle","NDArrayHandle"
"MXNDArraySaveRawBytes","int","save the NDArray into raw bytes. ","handlethe NDArray handle out_sizesize of the raw bytes out_bufthe head of returning memory bytes. 0 when success, -1 when failure happens ","size_t*","out_size","the NDArray handle ","out","size_t","size_t"
"MXNDArraySaveRawBytes","int","save the NDArray into raw bytes. ","handlethe NDArray handle out_sizesize of the raw bytes out_bufthe head of returning memory bytes. 0 when success, -1 when failure happens ","const char**","out_buf","the NDArray handle ","out","const char*","IntPtr"
"MXNDArraySave","int","Save list of narray into the file. ","fnamename of the file. num_argsnumber of arguments to save. argsthe array of NDArrayHandles to be saved. keysthe name of the NDArray, optional, can be NULL 0 when success, -1 when failure happens ","const char*","fname","name of the file. ","","const char*","string"
"MXNDArraySave","int","Save list of narray into the file. ","fnamename of the file. num_argsnumber of arguments to save. argsthe array of NDArrayHandles to be saved. keysthe name of the NDArray, optional, can be NULL 0 when success, -1 when failure happens ","mx_uint","num_args","name of the file. ","","mx_uint","mx_uint"
"MXNDArraySave","int","Save list of narray into the file. ","fnamename of the file. num_argsnumber of arguments to save. argsthe array of NDArrayHandles to be saved. keysthe name of the NDArray, optional, can be NULL 0 when success, -1 when failure happens ","NDArrayHandle*","args","name of the file. ","","NDArrayHandle*","NDArrayHandle[]"
"MXNDArraySave","int","Save list of narray into the file. ","fnamename of the file. num_argsnumber of arguments to save. argsthe array of NDArrayHandles to be saved. keysthe name of the NDArray, optional, can be NULL 0 when success, -1 when failure happens ","const char**","keys","name of the file. ","","const char**","string[]"
"MXNDArrayLoad","int","Load list of narray from the file. ","fnamename of the file. out_sizenumber of narray loaded. out_arrhead of the returning narray handles. out_name_sizesize of output name arrray. out_namesthe names of returning NDArrays, can be NULL 0 when success, -1 when failure happens ","const char*","fname","name of the file. ","","const char*","string"
"MXNDArrayLoad","int","Load list of narray from the file. ","fnamename of the file. out_sizenumber of narray loaded. out_arrhead of the returning narray handles. out_name_sizesize of output name arrray. out_namesthe names of returning NDArrays, can be NULL 0 when success, -1 when failure happens ","mx_uint*","out_size","name of the file. ","out","mx_uint","mx_uint"
"MXNDArrayLoad","int","Load list of narray from the file. ","fnamename of the file. out_sizenumber of narray loaded. out_arrhead of the returning narray handles. out_name_sizesize of output name arrray. out_namesthe names of returning NDArrays, can be NULL 0 when success, -1 when failure happens ","NDArrayHandle**","out_arr","name of the file. ","out","NDArrayHandle*","IntPtr"
"MXNDArrayLoad","int","Load list of narray from the file. ","fnamename of the file. out_sizenumber of narray loaded. out_arrhead of the returning narray handles. out_name_sizesize of output name arrray. out_namesthe names of returning NDArrays, can be NULL 0 when success, -1 when failure happens ","mx_uint*","out_name_size","name of the file. ","out","mx_uint","mx_uint"
"MXNDArrayLoad","int","Load list of narray from the file. ","fnamename of the file. out_sizenumber of narray loaded. out_arrhead of the returning narray handles. out_name_sizesize of output name arrray. out_namesthe names of returning NDArrays, can be NULL 0 when success, -1 when failure happens ","const char***","out_names","name of the file. ","out","const char**","IntPtr"
"MXNDArrayLoad64","int","","","const char*","fname","","","const char*","string"
"MXNDArrayLoad64","int","","","mx_int64*","out_size","","out","mx_int64","mx_int64"
"MXNDArrayLoad64","int","","","NDArrayHandle**","out_arr","","out","NDArrayHandle*","IntPtr"
"MXNDArrayLoad64","int","","","mx_int64*","out_name_size","","out","mx_int64","mx_int64"
"MXNDArrayLoad64","int","","","const char***","out_names","","out","const char**","IntPtr"
"MXNDArrayLoadFromBuffer","int","Load list / dictionary of narrays from file content loaded into memory. This will load a list of ndarrays in a similar manner to MXNDArrayLoad, however, it loads from buffer containing the contents of a file, rather than from a specified file. ","ndarray_bufferpointer to the start of the ndarray file content sizesize of the file out_sizenumber of narray loaded. out_arrhead of the returning narray handles. out_name_sizesize of output name arrray. out_namesthe names of returning NDArrays, can be NULL 0 when success, -1 when failure happens ","const void*","ndarray_buffer","pointer to the start of the ndarray file content ","","const void*","IntPtr"
"MXNDArrayLoadFromBuffer","int","Load list / dictionary of narrays from file content loaded into memory. This will load a list of ndarrays in a similar manner to MXNDArrayLoad, however, it loads from buffer containing the contents of a file, rather than from a specified file. ","ndarray_bufferpointer to the start of the ndarray file content sizesize of the file out_sizenumber of narray loaded. out_arrhead of the returning narray handles. out_name_sizesize of output name arrray. out_namesthe names of returning NDArrays, can be NULL 0 when success, -1 when failure happens ","size_t","size","pointer to the start of the ndarray file content ","","size_t","size_t"
"MXNDArrayLoadFromBuffer","int","Load list / dictionary of narrays from file content loaded into memory. This will load a list of ndarrays in a similar manner to MXNDArrayLoad, however, it loads from buffer containing the contents of a file, rather than from a specified file. ","ndarray_bufferpointer to the start of the ndarray file content sizesize of the file out_sizenumber of narray loaded. out_arrhead of the returning narray handles. out_name_sizesize of output name arrray. out_namesthe names of returning NDArrays, can be NULL 0 when success, -1 when failure happens ","mx_uint*","out_size","pointer to the start of the ndarray file content ","out","mx_uint","mx_uint"
"MXNDArrayLoadFromBuffer","int","Load list / dictionary of narrays from file content loaded into memory. This will load a list of ndarrays in a similar manner to MXNDArrayLoad, however, it loads from buffer containing the contents of a file, rather than from a specified file. ","ndarray_bufferpointer to the start of the ndarray file content sizesize of the file out_sizenumber of narray loaded. out_arrhead of the returning narray handles. out_name_sizesize of output name arrray. out_namesthe names of returning NDArrays, can be NULL 0 when success, -1 when failure happens ","NDArrayHandle**","out_arr","pointer to the start of the ndarray file content ","out","NDArrayHandle*","IntPtr"
"MXNDArrayLoadFromBuffer","int","Load list / dictionary of narrays from file content loaded into memory. This will load a list of ndarrays in a similar manner to MXNDArrayLoad, however, it loads from buffer containing the contents of a file, rather than from a specified file. ","ndarray_bufferpointer to the start of the ndarray file content sizesize of the file out_sizenumber of narray loaded. out_arrhead of the returning narray handles. out_name_sizesize of output name arrray. out_namesthe names of returning NDArrays, can be NULL 0 when success, -1 when failure happens ","mx_uint*","out_name_size","pointer to the start of the ndarray file content ","out","mx_uint","mx_uint"
"MXNDArrayLoadFromBuffer","int","Load list / dictionary of narrays from file content loaded into memory. This will load a list of ndarrays in a similar manner to MXNDArrayLoad, however, it loads from buffer containing the contents of a file, rather than from a specified file. ","ndarray_bufferpointer to the start of the ndarray file content sizesize of the file out_sizenumber of narray loaded. out_arrhead of the returning narray handles. out_name_sizesize of output name arrray. out_namesthe names of returning NDArrays, can be NULL 0 when success, -1 when failure happens ","const char***","out_names","pointer to the start of the ndarray file content ","out","const char**","IntPtr"
"MXNDArrayLoadFromBuffer64","int","","","const void*","ndarray_buffer","","","const void*","IntPtr"
"MXNDArrayLoadFromBuffer64","int","","","size_t","size","","","size_t","size_t"
"MXNDArrayLoadFromBuffer64","int","","","mx_int64*","out_size","","out","mx_int64","mx_int64"
"MXNDArrayLoadFromBuffer64","int","","","NDArrayHandle**","out_arr","","out","NDArrayHandle*","IntPtr"
"MXNDArrayLoadFromBuffer64","int","","","mx_int64*","out_name_size","","out","mx_int64","mx_int64"
"MXNDArrayLoadFromBuffer64","int","","","const char***","out_names","","out","const char**","IntPtr"
"MXNDArraySyncCopyFromCPU","int","Perform a synchronize copy from a continugous CPU memory region. ","This function will call WaitToWrite before the copy is performed. This is useful to copy data from existing memory region that are not wrapped by NDArray(thus dependency not being tracked).handlethe NDArray handle datathe data source to copy from. sizethe memory size we want to copy from. ","NDArrayHandle","handle","the NDArray handle ","","NDArrayHandle","NDArrayHandle"
"MXNDArraySyncCopyFromCPU","int","Perform a synchronize copy from a continugous CPU memory region. ","This function will call WaitToWrite before the copy is performed. This is useful to copy data from existing memory region that are not wrapped by NDArray(thus dependency not being tracked).handlethe NDArray handle datathe data source to copy from. sizethe memory size we want to copy from. ","const void*","data","the NDArray handle ","","const void*","IntPtr"
"MXNDArraySyncCopyFromCPU","int","Perform a synchronize copy from a continugous CPU memory region. ","This function will call WaitToWrite before the copy is performed. This is useful to copy data from existing memory region that are not wrapped by NDArray(thus dependency not being tracked).handlethe NDArray handle datathe data source to copy from. sizethe memory size we want to copy from. ","size_t","size","the NDArray handle ","","size_t","size_t"
"MXNDArraySyncCopyToCPU","int","Perform a synchronize copyto a continugous CPU memory region. ","This function will call WaitToRead before the copy is performed. This is useful to copy data from existing memory region that are not wrapped by NDArray(thus dependency not being tracked).handlethe NDArray handle datathe data source to copy into. sizethe memory size we want to copy into. ","NDArrayHandle","handle","the NDArray handle ","","NDArrayHandle","NDArrayHandle"
"MXNDArraySyncCopyToCPU","int","Perform a synchronize copyto a continugous CPU memory region. ","This function will call WaitToRead before the copy is performed. This is useful to copy data from existing memory region that are not wrapped by NDArray(thus dependency not being tracked).handlethe NDArray handle datathe data source to copy into. sizethe memory size we want to copy into. ","void*","data","the NDArray handle ","","void*","IntPtr"
"MXNDArraySyncCopyToCPU","int","Perform a synchronize copyto a continugous CPU memory region. ","This function will call WaitToRead before the copy is performed. This is useful to copy data from existing memory region that are not wrapped by NDArray(thus dependency not being tracked).handlethe NDArray handle datathe data source to copy into. sizethe memory size we want to copy into. ","size_t","size","the NDArray handle ","","size_t","size_t"
"MXNDArraySyncCopyFromNDArray","int","Copy src.data() to dst.data() if i = -1, else dst.aux_data(i) if i >= 0 This function blocks. Do not use it in performance critical code. ","handle_dsthandle of a dst ndarray whose data/aux_data has been allocated handle_srchandle of a src ndarray which has default storage type idst data blob indicator ","NDArrayHandle","handle_dst","handle of a dst ndarray whose data/aux_data has been allocated ","","NDArrayHandle","NDArrayHandle"
"MXNDArraySyncCopyFromNDArray","int","Copy src.data() to dst.data() if i = -1, else dst.aux_data(i) if i >= 0 This function blocks. Do not use it in performance critical code. ","handle_dsthandle of a dst ndarray whose data/aux_data has been allocated handle_srchandle of a src ndarray which has default storage type idst data blob indicator ","const NDArrayHandle","handle_src","handle of a dst ndarray whose data/aux_data has been allocated ","","const NDArrayHandle","NDArrayHandle"
"MXNDArraySyncCopyFromNDArray","int","Copy src.data() to dst.data() if i = -1, else dst.aux_data(i) if i >= 0 This function blocks. Do not use it in performance critical code. ","handle_dsthandle of a dst ndarray whose data/aux_data has been allocated handle_srchandle of a src ndarray which has default storage type idst data blob indicator ","const int","i","handle of a dst ndarray whose data/aux_data has been allocated ","","const int","int"
"MXNDArraySyncCheckFormat","int","check whether the NDArray format is valid ","full_checkif True, rigorous check, O(N) operations Otherwise basic check, O(1) operations ","NDArrayHandle","handle","if True, rigorous check, O(N) operations Otherwise basic check, O(1) operations ","","NDArrayHandle","NDArrayHandle"
"MXNDArraySyncCheckFormat","int","check whether the NDArray format is valid ","full_checkif True, rigorous check, O(N) operations Otherwise basic check, O(1) operations ","const bool","full_check","if True, rigorous check, O(N) operations Otherwise basic check, O(1) operations ","","const bool","bool"
"MXNDArrayWaitToRead","int","Wait until all the pending writes with respect NDArray are finished. Always call this before read data out synchronizely. ","handlethe NDArray handle 0 when success, -1 when failure happens ","NDArrayHandle","handle","the NDArray handle ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayWaitToWrite","int","Wait until all the pending read/write with respect NDArray are finished. Always call this before write data into NDArray synchronizely. ","handlethe NDArray handle 0 when success, -1 when failure happens ","NDArrayHandle","handle","the NDArray handle ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayWaitAll","int","wait until all delayed operations in the system is completed ","0 when success, -1 when failure happens ","","","","","",""
"MXNDArrayFree","int","free the narray handle ","handlethe handle to be freed 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to be freed ","","NDArrayHandle","NDArrayHandle"
"MXNDArraySlice","int","Slice the NDArray along axis 0. ","handlethe handle to the NDArray slice_beginThe beginning index of slice slice_endThe ending index of slice outThe NDArrayHandle of sliced NDArray 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to the NDArray ","","NDArrayHandle","NDArrayHandle"
"MXNDArraySlice","int","Slice the NDArray along axis 0. ","handlethe handle to the NDArray slice_beginThe beginning index of slice slice_endThe ending index of slice outThe NDArrayHandle of sliced NDArray 0 when success, -1 when failure happens ","mx_uint","slice_begin","the handle to the NDArray ","","mx_uint","mx_uint"
"MXNDArraySlice","int","Slice the NDArray along axis 0. ","handlethe handle to the NDArray slice_beginThe beginning index of slice slice_endThe ending index of slice outThe NDArrayHandle of sliced NDArray 0 when success, -1 when failure happens ","mx_uint","slice_end","the handle to the NDArray ","","mx_uint","mx_uint"
"MXNDArraySlice","int","Slice the NDArray along axis 0. ","handlethe handle to the NDArray slice_beginThe beginning index of slice slice_endThe ending index of slice outThe NDArrayHandle of sliced NDArray 0 when success, -1 when failure happens ","NDArrayHandle*","out","the handle to the NDArray ","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayAt","int","Index the NDArray along axis 0. ","handlethe handle to the NDArray idxthe index outThe NDArrayHandle of output NDArray 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to the NDArray ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayAt","int","Index the NDArray along axis 0. ","handlethe handle to the NDArray idxthe index outThe NDArrayHandle of output NDArray 0 when success, -1 when failure happens ","mx_uint","idx","the handle to the NDArray ","","mx_uint","mx_uint"
"MXNDArrayAt","int","Index the NDArray along axis 0. ","handlethe handle to the NDArray idxthe index outThe NDArrayHandle of output NDArray 0 when success, -1 when failure happens ","NDArrayHandle*","out","the handle to the NDArray ","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetStorageType","int","get the storage type of the array ","","NDArrayHandle","handle","","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetStorageType","int","get the storage type of the array ","","int*","out_storage_type","","out","int","int"
"MXNDArrayReshape","int","Reshape the NDArray. ","handlethe handle to the narray ndimnumber of dimensions of new shape dimsnew shape outthe NDArrayHandle of reshaped NDArray 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to the narray ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayReshape","int","Reshape the NDArray. ","handlethe handle to the narray ndimnumber of dimensions of new shape dimsnew shape outthe NDArrayHandle of reshaped NDArray 0 when success, -1 when failure happens ","int","ndim","the handle to the narray ","","int","int"
"MXNDArrayReshape","int","Reshape the NDArray. ","handlethe handle to the narray ndimnumber of dimensions of new shape dimsnew shape outthe NDArrayHandle of reshaped NDArray 0 when success, -1 when failure happens ","int*","dims","the handle to the narray ","","int*","IntPtr"
"MXNDArrayReshape","int","Reshape the NDArray. ","handlethe handle to the narray ndimnumber of dimensions of new shape dimsnew shape outthe NDArrayHandle of reshaped NDArray 0 when success, -1 when failure happens ","NDArrayHandle*","out","the handle to the narray ","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayReshape64","int","Reshape the NDArray. ","handlethe handle to the narray ndimnumber of dimensions of new shape dimsnew shape outthe NDArrayHandle of reshaped NDArray 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to the narray ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayReshape64","int","Reshape the NDArray. ","handlethe handle to the narray ndimnumber of dimensions of new shape dimsnew shape outthe NDArrayHandle of reshaped NDArray 0 when success, -1 when failure happens ","int","ndim","the handle to the narray ","","int","int"
"MXNDArrayReshape64","int","Reshape the NDArray. ","handlethe handle to the narray ndimnumber of dimensions of new shape dimsnew shape outthe NDArrayHandle of reshaped NDArray 0 when success, -1 when failure happens ","dim_t*","dims","the handle to the narray ","","dim_t*","IntPtr"
"MXNDArrayReshape64","int","Reshape the NDArray. ","handlethe handle to the narray ndimnumber of dimensions of new shape dimsnew shape outthe NDArrayHandle of reshaped NDArray 0 when success, -1 when failure happens ","bool","reverse","","","bool","bool"
"MXNDArrayReshape64","int","Reshape the NDArray. ","handlethe handle to the narray ndimnumber of dimensions of new shape dimsnew shape outthe NDArrayHandle of reshaped NDArray 0 when success, -1 when failure happens ","NDArrayHandle*","out","the handle to the narray ","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetShape","int","DEPRECATED. Use MXNDArrayGetShapeEx instead. get the shape of the array. ","handlethe handle to the narray out_dimthe output dimension out_pdatapointer holder to get data pointer of the shape 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to the narray ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetShape","int","DEPRECATED. Use MXNDArrayGetShapeEx instead. get the shape of the array. ","handlethe handle to the narray out_dimthe output dimension out_pdatapointer holder to get data pointer of the shape 0 when success, -1 when failure happens ","mx_uint*","out_dim","the handle to the narray ","out","mx_uint","mx_uint"
"MXNDArrayGetShape","int","DEPRECATED. Use MXNDArrayGetShapeEx instead. get the shape of the array. ","handlethe handle to the narray out_dimthe output dimension out_pdatapointer holder to get data pointer of the shape 0 when success, -1 when failure happens ","const mx_uint**","out_pdata","the handle to the narray ","out","const mx_uint*","IntPtr"
"MXNDArrayGetShape64","int","","","NDArrayHandle","handle","","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetShape64","int","","","int*","out_dim","","out","int","int"
"MXNDArrayGetShape64","int","","","const int64_t**","out_pdata","","out","const int64_t*","IntPtr"
"MXNDArrayGetShapeEx","int","get the shape of the array ","handlethe handle to the narray out_dimthe output dimension out_pdatapointer holder to get data pointer of the shape 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to the narray ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetShapeEx","int","get the shape of the array ","handlethe handle to the narray out_dimthe output dimension out_pdatapointer holder to get data pointer of the shape 0 when success, -1 when failure happens ","int*","out_dim","the handle to the narray ","out","int","int"
"MXNDArrayGetShapeEx","int","get the shape of the array ","handlethe handle to the narray out_dimthe output dimension out_pdatapointer holder to get data pointer of the shape 0 when success, -1 when failure happens ","const int**","out_pdata","the handle to the narray ","out","const int*","IntPtr"
"MXNDArrayGetShapeEx64","int","","","NDArrayHandle","handle","","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetShapeEx64","int","","","int*","out_dim","","out","int","int"
"MXNDArrayGetShapeEx64","int","","","const mx_int64**","out_pdata","","out","const mx_int64*","IntPtr"
"MXNDArrayGetData","int","get the content of the data in NDArray ","handlethe handle to the ndarray out_pdatapointer holder to get pointer of data 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to the ndarray ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetData","int","get the content of the data in NDArray ","handlethe handle to the ndarray out_pdatapointer holder to get pointer of data 0 when success, -1 when failure happens ","void**","out_pdata","the handle to the ndarray ","out","void*","IntPtr"
"MXNDArrayToDLPack","int","Create a reference view of NDArray that represents as DLManagedTensor Notice: MXNet uses asynchronous execution. Please call MXNDArrayWaitToRead or MXNDArrayWaitToWrite before calling MXNDArrayToDLPack. ","handlethe handle to the ndarray out_dlpackpointer holder to get pointer of DLManagedTensor 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to the ndarray ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayToDLPack","int","Create a reference view of NDArray that represents as DLManagedTensor Notice: MXNet uses asynchronous execution. Please call MXNDArrayWaitToRead or MXNDArrayWaitToWrite before calling MXNDArrayToDLPack. ","handlethe handle to the ndarray out_dlpackpointer holder to get pointer of DLManagedTensor 0 when success, -1 when failure happens ","DLManagedTensorHandle*","out_dlpack","the handle to the ndarray ","out","DLManagedTensorHandle","DLManagedTensorHandle"
"MXNDArrayFromDLPack","int","DEPRECATED. Use MXNDArrayFromDLPackEx instead. ","This allows us to create a NDArray using the memory allocated by an external deep learning framework that is DLPack compatible.The memory is retained until the NDArray went out of scope.dlpackthe pointer of the input DLManagedTensor transient_handlewhether the handle will be destructed before calling the deleter out_handlepointer holder to get pointer of NDArray 0 when success, -1 when failure happens ","DLManagedTensorHandle","dlpack","the pointer of the input DLManagedTensor ","","DLManagedTensorHandle","DLManagedTensorHandle"
"MXNDArrayFromDLPack","int","DEPRECATED. Use MXNDArrayFromDLPackEx instead. ","This allows us to create a NDArray using the memory allocated by an external deep learning framework that is DLPack compatible.The memory is retained until the NDArray went out of scope.dlpackthe pointer of the input DLManagedTensor transient_handlewhether the handle will be destructed before calling the deleter out_handlepointer holder to get pointer of NDArray 0 when success, -1 when failure happens ","NDArrayHandle*","out_handle","the pointer of the input DLManagedTensor ","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayFromDLPackEx","int","Create a NDArray backed by a dlpack tensor. ","This allows us to create a NDArray using the memory allocated by an external deep learning framework that is DLPack compatible.The memory is retained until the NDArray went out of scope.dlpackthe pointer of the input DLManagedTensor transient_handlewhether the handle will be destructed before calling the deleter out_handlepointer holder to get pointer of NDArray 0 when success, -1 when failure happens ","DLManagedTensorHandle","dlpack","the pointer of the input DLManagedTensor ","","DLManagedTensorHandle","DLManagedTensorHandle"
"MXNDArrayFromDLPackEx","int","Create a NDArray backed by a dlpack tensor. ","This allows us to create a NDArray using the memory allocated by an external deep learning framework that is DLPack compatible.The memory is retained until the NDArray went out of scope.dlpackthe pointer of the input DLManagedTensor transient_handlewhether the handle will be destructed before calling the deleter out_handlepointer holder to get pointer of NDArray 0 when success, -1 when failure happens ","const bool","transient_handle","the pointer of the input DLManagedTensor ","","const bool","bool"
"MXNDArrayFromDLPackEx","int","Create a NDArray backed by a dlpack tensor. ","This allows us to create a NDArray using the memory allocated by an external deep learning framework that is DLPack compatible.The memory is retained until the NDArray went out of scope.dlpackthe pointer of the input DLManagedTensor transient_handlewhether the handle will be destructed before calling the deleter out_handlepointer holder to get pointer of NDArray 0 when success, -1 when failure happens ","NDArrayHandle*","out_handle","the pointer of the input DLManagedTensor ","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayCallDLPackDeleter","int","Delete a dlpack tensor. ","dlpackthe pointer of the input DLManagedTensor 0 when success, -1 when failure happens ","DLManagedTensorHandle","dlpack","the pointer of the input DLManagedTensor ","","DLManagedTensorHandle","DLManagedTensorHandle"
"MXNDArrayGetDType","int","get the type of the data in NDArray ","handlethe handle to the narray out_dtypepointer holder to get type of data 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to the narray ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetDType","int","get the type of the data in NDArray ","handlethe handle to the narray out_dtypepointer holder to get type of data 0 when success, -1 when failure happens ","int*","out_dtype","the handle to the narray ","out","int","int"
"MXNDArrayGetAuxType","int","get the type of the ith aux data in NDArray ","handlethe handle to the narray ithe index of the aux data out_typepointer holder to get type of aux data 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to the narray ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetAuxType","int","get the type of the ith aux data in NDArray ","handlethe handle to the narray ithe index of the aux data out_typepointer holder to get type of aux data 0 when success, -1 when failure happens ","mx_uint","i","the handle to the narray ","","mx_uint","mx_uint"
"MXNDArrayGetAuxType","int","get the type of the ith aux data in NDArray ","handlethe handle to the narray ithe index of the aux data out_typepointer holder to get type of aux data 0 when success, -1 when failure happens ","int*","out_type","the handle to the narray ","out","int","int"
"MXNDArrayGetAuxType64","int","","","NDArrayHandle","handle","","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetAuxType64","int","","","mx_int64","i","","","mx_int64","mx_int64"
"MXNDArrayGetAuxType64","int","","","int*","out_type","","out","int","int"
"MXNDArrayGetAuxNDArray","int","Get a deep copy of the ith aux data blob in the form of an NDArray of default storage type. This function blocks. Do not use it in performance critical code. ","","NDArrayHandle","handle","","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetAuxNDArray","int","Get a deep copy of the ith aux data blob in the form of an NDArray of default storage type. This function blocks. Do not use it in performance critical code. ","","mx_uint","i","","","mx_uint","mx_uint"
"MXNDArrayGetAuxNDArray","int","Get a deep copy of the ith aux data blob in the form of an NDArray of default storage type. This function blocks. Do not use it in performance critical code. ","","NDArrayHandle*","out","","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetAuxNDArray64","int","","","NDArrayHandle","handle","","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetAuxNDArray64","int","","","mx_int64","i","","","mx_int64","mx_int64"
"MXNDArrayGetAuxNDArray64","int","","","NDArrayHandle*","out","","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetDataNDArray","int","Get a deep copy of the data blob in the form of an NDArray of default storage type. This function blocks. Do not use it in performance critical code. ","","NDArrayHandle","handle","","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetDataNDArray","int","Get a deep copy of the data blob in the form of an NDArray of default storage type. This function blocks. Do not use it in performance critical code. ","","NDArrayHandle*","out","","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetContext","int","get the context of the NDArray ","handlethe handle to the narray out_dev_typethe output device type out_dev_idthe output device id 0 when success, -1 when failure happens ","NDArrayHandle","handle","the handle to the narray ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetContext","int","get the context of the NDArray ","handlethe handle to the narray out_dev_typethe output device type out_dev_idthe output device id 0 when success, -1 when failure happens ","int*","out_dev_type","the handle to the narray ","out","int","int"
"MXNDArrayGetContext","int","get the context of the NDArray ","handlethe handle to the narray out_dev_typethe output device type out_dev_idthe output device id 0 when success, -1 when failure happens ","int*","out_dev_id","the handle to the narray ","out","int","int"
"MXNDArrayGetGrad","int","return gradient buffer attached to this NDArray ","handleNDArray handle 0 when success, -1 when failure happens ","NDArrayHandle","handle","NDArray handle ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetGrad","int","return gradient buffer attached to this NDArray ","handleNDArray handle 0 when success, -1 when failure happens ","NDArrayHandle*","out","NDArray handle ","out","NDArrayHandle","NDArrayHandle"
"MXNDArrayDetach","int","detach and ndarray from computation graph by clearing entry_ ","handleNDArray handle 0 when success, -1 when failure happens ","NDArrayHandle","handle","NDArray handle ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayDetach","int","detach and ndarray from computation graph by clearing entry_ ","handleNDArray handle 0 when success, -1 when failure happens ","NDArrayHandle*","out","NDArray handle ","out","NDArrayHandle","NDArrayHandle"
"MXNDArraySetGradState","int","set the flag for gradient array state. ","handleNDArray handle statethe new state. 0 when success, -1 when failure happens ","NDArrayHandle","handle","NDArray handle ","","NDArrayHandle","NDArrayHandle"
"MXNDArraySetGradState","int","set the flag for gradient array state. ","handleNDArray handle statethe new state. 0 when success, -1 when failure happens ","int","state","NDArray handle ","","int","int"
"MXNDArrayGetGradState","int","set the flag for gradient array state. ","handleNDArray handle statethe new state. 0 when success, -1 when failure happens ","NDArrayHandle","handle","NDArray handle ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetGradState","int","set the flag for gradient array state. ","handleNDArray handle statethe new state. 0 when success, -1 when failure happens ","int*","out","NDArray handle ","out","int","int"
"MXListFunctions","int","list all the available functions handles most user can use it to list all the needed functions ","out_sizethe size of returned array out_arraythe output function array 0 when success, -1 when failure happens ","mx_uint*","out_size","the size of returned array ","out","mx_uint","mx_uint"
"MXListFunctions","int","list all the available functions handles most user can use it to list all the needed functions ","out_sizethe size of returned array out_arraythe output function array 0 when success, -1 when failure happens ","FunctionHandle**","out_array","the size of returned array ","out","FunctionHandle*","IntPtr"
"MXListFunctions64","int","","","mx_int64*","out_size","","out","mx_int64","mx_int64"
"MXListFunctions64","int","","","FunctionHandle**","out_array","","out","FunctionHandle*","IntPtr"
"MXGetFunction","int","get the function handle by name ","namethe name of the function outthe corresponding function handle 0 when success, -1 when failure happens ","const char*","name","the name of the function ","","const char*","string"
"MXGetFunction","int","get the function handle by name ","namethe name of the function outthe corresponding function handle 0 when success, -1 when failure happens ","FunctionHandle*","out","the name of the function ","out","FunctionHandle","FunctionHandle"
"MXFuncGetInfo","int","Get the information of the function handle. ","funThe function handle. nameThe returned name of the function. descriptionThe returned description of the function. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType information about the arguments. arg_descriptionsDescription information about the arguments. return_typeReturn type of the function. 0 when success, -1 when failure happens ","FunctionHandle","fun","The function handle. ","","FunctionHandle","FunctionHandle"
"MXFuncGetInfo","int","Get the information of the function handle. ","funThe function handle. nameThe returned name of the function. descriptionThe returned description of the function. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType information about the arguments. arg_descriptionsDescription information about the arguments. return_typeReturn type of the function. 0 when success, -1 when failure happens ","const char**","name","The function handle. ","out","const char*","IntPtr"
"MXFuncGetInfo","int","Get the information of the function handle. ","funThe function handle. nameThe returned name of the function. descriptionThe returned description of the function. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType information about the arguments. arg_descriptionsDescription information about the arguments. return_typeReturn type of the function. 0 when success, -1 when failure happens ","const char**","description","The function handle. ","","const char**","string[]"
"MXFuncGetInfo","int","Get the information of the function handle. ","funThe function handle. nameThe returned name of the function. descriptionThe returned description of the function. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType information about the arguments. arg_descriptionsDescription information about the arguments. return_typeReturn type of the function. 0 when success, -1 when failure happens ","mx_uint*","num_args","The function handle. ","out","mx_uint","mx_uint"
"MXFuncGetInfo","int","Get the information of the function handle. ","funThe function handle. nameThe returned name of the function. descriptionThe returned description of the function. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType information about the arguments. arg_descriptionsDescription information about the arguments. return_typeReturn type of the function. 0 when success, -1 when failure happens ","const char***","arg_names","The function handle. ","out","const char**","IntPtr"
"MXFuncGetInfo","int","Get the information of the function handle. ","funThe function handle. nameThe returned name of the function. descriptionThe returned description of the function. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType information about the arguments. arg_descriptionsDescription information about the arguments. return_typeReturn type of the function. 0 when success, -1 when failure happens ","const char***","arg_type_infos","The function handle. ","out","const char**","IntPtr"
"MXFuncGetInfo","int","Get the information of the function handle. ","funThe function handle. nameThe returned name of the function. descriptionThe returned description of the function. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType information about the arguments. arg_descriptionsDescription information about the arguments. return_typeReturn type of the function. 0 when success, -1 when failure happens ","const char***","arg_descriptions","The function handle. ","out","const char**","IntPtr"
"MXFuncGetInfo","int","Get the information of the function handle. ","funThe function handle. nameThe returned name of the function. descriptionThe returned description of the function. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType information about the arguments. arg_descriptionsDescription information about the arguments. return_typeReturn type of the function. 0 when success, -1 when failure happens ","const char**","return_type","The function handle. ","out","const char*","IntPtr"
"MXFuncDescribe","int","get the argument requirements of the function ","funinput function handle num_use_varshow many NDArrays to be passed in as used_vars num_scalarsscalar variable is needed num_mutate_varshow many NDArrays to be passed in as mutate_vars type_maskthe type mask of this function 0 when success, -1 when failure happens MXFuncInvoke","FunctionHandle","fun","input function handle ","","FunctionHandle","FunctionHandle"
"MXFuncDescribe","int","get the argument requirements of the function ","funinput function handle num_use_varshow many NDArrays to be passed in as used_vars num_scalarsscalar variable is needed num_mutate_varshow many NDArrays to be passed in as mutate_vars type_maskthe type mask of this function 0 when success, -1 when failure happens MXFuncInvoke","mx_uint*","num_use_vars","input function handle ","out","mx_uint","mx_uint"
"MXFuncDescribe","int","get the argument requirements of the function ","funinput function handle num_use_varshow many NDArrays to be passed in as used_vars num_scalarsscalar variable is needed num_mutate_varshow many NDArrays to be passed in as mutate_vars type_maskthe type mask of this function 0 when success, -1 when failure happens MXFuncInvoke","mx_uint*","num_scalars","input function handle ","out","mx_uint","mx_uint"
"MXFuncDescribe","int","get the argument requirements of the function ","funinput function handle num_use_varshow many NDArrays to be passed in as used_vars num_scalarsscalar variable is needed num_mutate_varshow many NDArrays to be passed in as mutate_vars type_maskthe type mask of this function 0 when success, -1 when failure happens MXFuncInvoke","mx_uint*","num_mutate_vars","input function handle ","out","mx_uint","mx_uint"
"MXFuncDescribe","int","get the argument requirements of the function ","funinput function handle num_use_varshow many NDArrays to be passed in as used_vars num_scalarsscalar variable is needed num_mutate_varshow many NDArrays to be passed in as mutate_vars type_maskthe type mask of this function 0 when success, -1 when failure happens MXFuncInvoke","int*","type_mask","input function handle ","out","int","int"
"MXFuncInvoke","int","invoke a function, the array size of passed in arguments must match the values in the ","funthe function use_varsthe normal arguments passed to function scalar_argsthe scalar qarguments mutate_varsthe mutate arguments 0 when success, -1 when failure happens MXFuncDescribeArgs ","FunctionHandle","fun","the function ","","FunctionHandle","FunctionHandle"
"MXFuncInvoke","int","invoke a function, the array size of passed in arguments must match the values in the ","funthe function use_varsthe normal arguments passed to function scalar_argsthe scalar qarguments mutate_varsthe mutate arguments 0 when success, -1 when failure happens MXFuncDescribeArgs ","NDArrayHandle*","use_vars","the function ","","NDArrayHandle*","NDArrayHandle[]"
"MXFuncInvoke","int","invoke a function, the array size of passed in arguments must match the values in the ","funthe function use_varsthe normal arguments passed to function scalar_argsthe scalar qarguments mutate_varsthe mutate arguments 0 when success, -1 when failure happens MXFuncDescribeArgs ","mx_float*","scalar_args","the function ","","mx_float*","IntPtr"
"MXFuncInvoke","int","invoke a function, the array size of passed in arguments must match the values in the ","funthe function use_varsthe normal arguments passed to function scalar_argsthe scalar qarguments mutate_varsthe mutate arguments 0 when success, -1 when failure happens MXFuncDescribeArgs ","NDArrayHandle*","mutate_vars","the function ","","NDArrayHandle*","NDArrayHandle[]"
"MXFuncInvokeEx","int","invoke a function, the array size of passed in arguments must match the values in the ","funthe function use_varsthe normal arguments passed to function scalar_argsthe scalar qarguments mutate_varsthe mutate arguments num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens MXFuncDescribeArgs ","FunctionHandle","fun","the function ","","FunctionHandle","FunctionHandle"
"MXFuncInvokeEx","int","invoke a function, the array size of passed in arguments must match the values in the ","funthe function use_varsthe normal arguments passed to function scalar_argsthe scalar qarguments mutate_varsthe mutate arguments num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens MXFuncDescribeArgs ","NDArrayHandle*","use_vars","the function ","","NDArrayHandle*","NDArrayHandle[]"
"MXFuncInvokeEx","int","invoke a function, the array size of passed in arguments must match the values in the ","funthe function use_varsthe normal arguments passed to function scalar_argsthe scalar qarguments mutate_varsthe mutate arguments num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens MXFuncDescribeArgs ","mx_float*","scalar_args","the function ","","mx_float*","IntPtr"
"MXFuncInvokeEx","int","invoke a function, the array size of passed in arguments must match the values in the ","funthe function use_varsthe normal arguments passed to function scalar_argsthe scalar qarguments mutate_varsthe mutate arguments num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens MXFuncDescribeArgs ","NDArrayHandle*","mutate_vars","the function ","","NDArrayHandle*","NDArrayHandle[]"
"MXFuncInvokeEx","int","invoke a function, the array size of passed in arguments must match the values in the ","funthe function use_varsthe normal arguments passed to function scalar_argsthe scalar qarguments mutate_varsthe mutate arguments num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens MXFuncDescribeArgs ","int","num_params","the function ","","int","int"
"MXFuncInvokeEx","int","invoke a function, the array size of passed in arguments must match the values in the ","funthe function use_varsthe normal arguments passed to function scalar_argsthe scalar qarguments mutate_varsthe mutate arguments num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens MXFuncDescribeArgs ","char**","param_keys","the function ","","char**","string[]"
"MXFuncInvokeEx","int","invoke a function, the array size of passed in arguments must match the values in the ","funthe function use_varsthe normal arguments passed to function scalar_argsthe scalar qarguments mutate_varsthe mutate arguments num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens MXFuncDescribeArgs ","char**","param_vals","the function ","","char**","string[]"
"MXImperativeInvoke","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens ","AtomicSymbolCreator","creator","the op ","","AtomicSymbolCreator","AtomicSymbolCreator"
"MXImperativeInvoke","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens ","int","num_inputs","the op ","","int","int"
"MXImperativeInvoke","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens ","NDArrayHandle*","inputs","the op ","","NDArrayHandle*","NDArrayHandle[]"
"MXImperativeInvoke","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens ","int*","num_outputs","the op ","ref","int","int"
"MXImperativeInvoke","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens ","NDArrayHandle**","outputs","the op ","ref","NDArrayHandle*","IntPtr"
"MXImperativeInvoke","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens ","int","num_params","the op ","","int","int"
"MXImperativeInvoke","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens ","const char**","param_keys","the op ","","const char**","string[]"
"MXImperativeInvoke","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters 0 when success, -1 when failure happens ","const char**","param_vals","the op ","","const char**","string[]"
"MXImperativeInvokeEx","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","AtomicSymbolCreator","creator","the op ","","AtomicSymbolCreator","AtomicSymbolCreator"
"MXImperativeInvokeEx","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","int","num_inputs","the op ","","int","int"
"MXImperativeInvokeEx","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","NDArrayHandle*","inputs","the op ","","NDArrayHandle*","NDArrayHandle[]"
"MXImperativeInvokeEx","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","int*","num_outputs","the op ","ref","int","int"
"MXImperativeInvokeEx","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","NDArrayHandle**","outputs","the op ","ref","NDArrayHandle*","IntPtr"
"MXImperativeInvokeEx","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","int","num_params","the op ","","int","int"
"MXImperativeInvokeEx","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","const char**","param_keys","the op ","","const char**","string[]"
"MXImperativeInvokeEx","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","const char**","param_vals","the op ","","const char**","string[]"
"MXImperativeInvokeEx","int","invoke a nnvm op and imperative function ","creatorthe op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays num_paramsnumber of keyword parameters param_keyskeys for keyword parameters param_valsvalues for keyword parameters out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","const int**","out_stypes","the op ","out","const int*","IntPtr"
"MXAutogradSetIsRecording","int","set whether to record operator for autograd ","is_recording1 when recording, 0 when not recording. prevreturns the previous status before this set. 0 when success, -1 when failure happens ","int","is_recording","1 when recording, 0 when not recording. ","","int","int"
"MXAutogradSetIsRecording","int","set whether to record operator for autograd ","is_recording1 when recording, 0 when not recording. prevreturns the previous status before this set. 0 when success, -1 when failure happens ","int*","prev","1 when recording, 0 when not recording. ","","int*","IntPtr"
"MXAutogradSetIsTraining","int","set whether to record operator for autograd ","is_training1 when training, 0 when testing prevreturns the previous status before this set. 0 when success, -1 when failure happens ","int","is_training","1 when training, 0 when testing ","","int","int"
"MXAutogradSetIsTraining","int","set whether to record operator for autograd ","is_training1 when training, 0 when testing prevreturns the previous status before this set. 0 when success, -1 when failure happens ","int*","prev","1 when training, 0 when testing ","","int*","IntPtr"
"MXAutogradIsRecording","int","get whether autograd recording is on ","currreturns the current status. 0 when success, -1 when failure happens ","bool*","curr","returns the current status. ","out","bool","bool"
"MXAutogradIsTraining","int","get whether training mode is on ","currreturns the current status. 0 when success, -1 when failure happens ","bool*","curr","returns the current status. ","out","bool","bool"
"MXIsNumpyShape","int","get whether numpy compatibility is on ","currreturns the current status 0 when success, -1 when failure happens ","bool*","curr","returns the current status ","out","bool","bool"
"MXSetIsNumpyShape","int","set numpy compatibility switch ","is_np_shape1 when numpy shape semantics is on, 0 when off prevreturns the previous status before this set 0 when success, -1 when failure happens ","int","is_np_shape","1 when numpy shape semantics is on, 0 when off ","","int","int"
"MXSetIsNumpyShape","int","set numpy compatibility switch ","is_np_shape1 when numpy shape semantics is on, 0 when off prevreturns the previous status before this set 0 when success, -1 when failure happens ","int*","prev","1 when numpy shape semantics is on, 0 when off ","","int*","IntPtr"
"MXAutogradMarkVariables","int","mark NDArrays as variables to compute gradient for autograd ","num_varnumber of variable NDArrays var_handlesvariable NDArrays 0 when success, -1 when failure happens ","mx_uint","num_var","number of variable NDArrays ","","mx_uint","mx_uint"
"MXAutogradMarkVariables","int","mark NDArrays as variables to compute gradient for autograd ","num_varnumber of variable NDArrays var_handlesvariable NDArrays 0 when success, -1 when failure happens ","NDArrayHandle*","var_handles","number of variable NDArrays ","","NDArrayHandle*","NDArrayHandle[]"
"MXAutogradMarkVariables","int","mark NDArrays as variables to compute gradient for autograd ","num_varnumber of variable NDArrays var_handlesvariable NDArrays 0 when success, -1 when failure happens ","mx_uint*","reqs_array","","","mx_uint*","IntPtr"
"MXAutogradMarkVariables","int","mark NDArrays as variables to compute gradient for autograd ","num_varnumber of variable NDArrays var_handlesvariable NDArrays 0 when success, -1 when failure happens ","NDArrayHandle*","grad_handles","","","NDArrayHandle*","NDArrayHandle[]"
"MXAutogradComputeGradient","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays 0 when success, -1 when failure happens ","mx_uint","num_output","number of output NDArray ","","mx_uint","mx_uint"
"MXAutogradComputeGradient","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays 0 when success, -1 when failure happens ","NDArrayHandle*","output_handles","number of output NDArray ","","NDArrayHandle*","NDArrayHandle[]"
"MXAutogradBackward","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays retain_graphwhether to keep the graph after backward 0 when success, -1 when failure happens ","mx_uint","num_output","number of output NDArray ","","mx_uint","mx_uint"
"MXAutogradBackward","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays retain_graphwhether to keep the graph after backward 0 when success, -1 when failure happens ","NDArrayHandle*","output_handles","number of output NDArray ","","NDArrayHandle*","NDArrayHandle[]"
"MXAutogradBackward","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays retain_graphwhether to keep the graph after backward 0 when success, -1 when failure happens ","NDArrayHandle*","ograd_handles","number of output NDArray ","","NDArrayHandle*","NDArrayHandle[]"
"MXAutogradBackward","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays retain_graphwhether to keep the graph after backward 0 when success, -1 when failure happens ","int","retain_graph","number of output NDArray ","","int","int"
"MXAutogradBackwardEx","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays num_variablesnumber of variables ","mx_uint","num_output","number of output NDArray ","","mx_uint","mx_uint"
"MXAutogradBackwardEx","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays num_variablesnumber of variables ","NDArrayHandle*","output_handles","number of output NDArray ","","NDArrayHandle*","NDArrayHandle[]"
"MXAutogradBackwardEx","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays num_variablesnumber of variables ","NDArrayHandle*","ograd_handles","number of output NDArray ","","NDArrayHandle*","NDArrayHandle[]"
"MXAutogradBackwardEx","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays num_variablesnumber of variables ","mx_uint","num_variables","number of output NDArray ","","mx_uint","mx_uint"
"MXAutogradBackwardEx","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays num_variablesnumber of variables ","NDArrayHandle*","var_handles","number of output NDArray ","","NDArrayHandle*","NDArrayHandle[]"
"MXAutogradBackwardEx","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays num_variablesnumber of variables ","int","retain_graph","number of output NDArray ","","int","int"
"MXAutogradBackwardEx","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays num_variablesnumber of variables ","int","create_graph","","","int","int"
"MXAutogradBackwardEx","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays num_variablesnumber of variables ","int","is_train","number of output NDArray ","","int","int"
"MXAutogradBackwardEx","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays num_variablesnumber of variables ","NDArrayHandle**","grad_handles","","","NDArrayHandle**","IntPtr"
"MXAutogradBackwardEx","int","compute the gradient of outputs w.r.t variabels ","num_outputnumber of output NDArray output_handlesoutput NDArrays ograd_handleshead gradient for NDArrays num_variablesnumber of variables ","int**","grad_stypes","","","int**","IntPtr"
"MXAutogradGetSymbol","int","","","NDArrayHandle","handle","","","NDArrayHandle","NDArrayHandle"
"MXAutogradGetSymbol","int","","","SymbolHandle*","out","","out","SymbolHandle","SymbolHandle"
"MXCreateCachedOp","int","create cached operator ","","SymbolHandle","handle","","","SymbolHandle","SymbolHandle"
"MXCreateCachedOp","int","create cached operator ","","CachedOpHandle*","out","","out","CachedOpHandle","CachedOpHandle"
"MXCreateCachedOpEx","int","create cached operator ","","SymbolHandle","handle","","","SymbolHandle","SymbolHandle"
"MXCreateCachedOpEx","int","create cached operator ","","int","num_flags","","","int","int"
"MXCreateCachedOpEx","int","create cached operator ","","const char**","keys","","","const char**","string[]"
"MXCreateCachedOpEx","int","create cached operator ","","const char**","vals","","","const char**","string[]"
"MXCreateCachedOpEx","int","create cached operator ","","CachedOpHandle*","out","","out","CachedOpHandle","CachedOpHandle"
"MXFreeCachedOp","int","free cached operator ","","CachedOpHandle","handle","","","CachedOpHandle","CachedOpHandle"
"MXInvokeCachedOp","int","invoke cached operator ","","CachedOpHandle","handle","","","CachedOpHandle","CachedOpHandle"
"MXInvokeCachedOp","int","invoke cached operator ","","int","num_inputs","","","int","int"
"MXInvokeCachedOp","int","invoke cached operator ","","NDArrayHandle*","inputs","","","NDArrayHandle*","NDArrayHandle[]"
"MXInvokeCachedOp","int","invoke cached operator ","","int*","num_outputs","","","int*","IntPtr"
"MXInvokeCachedOp","int","invoke cached operator ","","NDArrayHandle**","outputs","","","NDArrayHandle**","IntPtr"
"MXInvokeCachedOpEx","int","invoke a cached op ","handlethe handle to the cached op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","CachedOpHandle","handle","the handle to the cached op ","","CachedOpHandle","CachedOpHandle"
"MXInvokeCachedOpEx","int","invoke a cached op ","handlethe handle to the cached op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","int","num_inputs","the handle to the cached op ","","int","int"
"MXInvokeCachedOpEx","int","invoke a cached op ","handlethe handle to the cached op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","NDArrayHandle*","inputs","the handle to the cached op ","","NDArrayHandle*","NDArrayHandle[]"
"MXInvokeCachedOpEx","int","invoke a cached op ","handlethe handle to the cached op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","int*","num_outputs","the handle to the cached op ","","int*","IntPtr"
"MXInvokeCachedOpEx","int","invoke a cached op ","handlethe handle to the cached op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","NDArrayHandle**","outputs","the handle to the cached op ","","NDArrayHandle**","IntPtr"
"MXInvokeCachedOpEx","int","invoke a cached op ","handlethe handle to the cached op num_inputsnumber of input NDArrays inputsinput NDArrays num_outputsnumber of output NDArrays outputsoutput NDArrays out_stypesoutput ndarrays' stypes 0 when success, -1 when failure happens ","const int**","out_stypes","the handle to the cached op ","out","const int*","IntPtr"
"MXListAllOpNames","int","list all the available operator names, include entries. ","out_sizethe size of returned array out_arraythe output operator name array. 0 when success, -1 when failure happens ","mx_uint*","out_size","the size of returned array ","out","mx_uint","mx_uint"
"MXListAllOpNames","int","list all the available operator names, include entries. ","out_sizethe size of returned array out_arraythe output operator name array. 0 when success, -1 when failure happens ","const char***","out_array","the size of returned array ","out","const char**","IntPtr"
"MXListAllOpNames64","int","","","mx_int64*","out_size","","out","mx_int64","mx_int64"
"MXListAllOpNames64","int","","","const char***","out_array","","out","const char**","IntPtr"
"MXSymbolListAtomicSymbolCreators","int","list all the available AtomicSymbolEntry ","out_sizethe size of returned array out_arraythe output AtomicSymbolCreator array 0 when success, -1 when failure happens ","mx_uint*","out_size","the size of returned array ","out","mx_uint","mx_uint"
"MXSymbolListAtomicSymbolCreators","int","list all the available AtomicSymbolEntry ","out_sizethe size of returned array out_arraythe output AtomicSymbolCreator array 0 when success, -1 when failure happens ","AtomicSymbolCreator**","out_array","the size of returned array ","out","AtomicSymbolCreator*","IntPtr"
"MXSymbolListAtomicSymbolCreators64","int","","","mx_int64*","out_size","","out","mx_int64","mx_int64"
"MXSymbolListAtomicSymbolCreators64","int","","","AtomicSymbolCreator**","out_array","","out","AtomicSymbolCreator*","IntPtr"
"MXSymbolGetAtomicSymbolName","int","Get the name of an atomic symbol. ","creatorthe AtomicSymbolCreator. nameThe returned name of the creator. ","AtomicSymbolCreator","creator","the AtomicSymbolCreator. ","","AtomicSymbolCreator","AtomicSymbolCreator"
"MXSymbolGetAtomicSymbolName","int","Get the name of an atomic symbol. ","creatorthe AtomicSymbolCreator. nameThe returned name of the creator. ","const char**","name","the AtomicSymbolCreator. ","out","const char*","IntPtr"
"MXSymbolGetInputSymbols","int","Get the input symbols of the graph. ","symThe graph. inputsThe input symbols of the graph. input_sizethe number of input symbols returned. ","SymbolHandle","sym","The graph. ","","SymbolHandle","SymbolHandle"
"MXSymbolGetInputSymbols","int","Get the input symbols of the graph. ","symThe graph. inputsThe input symbols of the graph. input_sizethe number of input symbols returned. ","SymbolHandle**","inputs","The graph. ","out","SymbolHandle*","IntPtr"
"MXSymbolGetInputSymbols","int","Get the input symbols of the graph. ","symThe graph. inputsThe input symbols of the graph. input_sizethe number of input symbols returned. ","int*","input_size","The graph. ","","int*","IntPtr"
"MXSymbolCutSubgraph","int","Cut a subgraph whose nodes are marked with a subgraph attribute. The input graph will be modified. A variable node will be created for each edge that connects to nodes outside the subgraph. The outside nodes that connect to the subgraph will be returned. ","symThe graph. inputsThe nodes that connect to the subgraph. input_sizeThe number of such nodes. ","SymbolHandle","sym","The graph. ","","SymbolHandle","SymbolHandle"
"MXSymbolCutSubgraph","int","Cut a subgraph whose nodes are marked with a subgraph attribute. The input graph will be modified. A variable node will be created for each edge that connects to nodes outside the subgraph. The outside nodes that connect to the subgraph will be returned. ","symThe graph. inputsThe nodes that connect to the subgraph. input_sizeThe number of such nodes. ","SymbolHandle**","inputs","The graph. ","out","SymbolHandle*","IntPtr"
"MXSymbolCutSubgraph","int","Cut a subgraph whose nodes are marked with a subgraph attribute. The input graph will be modified. A variable node will be created for each edge that connects to nodes outside the subgraph. The outside nodes that connect to the subgraph will be returned. ","symThe graph. inputsThe nodes that connect to the subgraph. input_sizeThe number of such nodes. ","int*","input_size","The graph. ","","int*","IntPtr"
"MXSymbolGetAtomicSymbolInfo","int","Get the detailed information about atomic symbol. ","creatorthe AtomicSymbolCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. key_var_num_argsThe keyword argument for specifying variable number of arguments. When this parameter has non-zero length, the function allows variable number of positional arguments, and will need the caller to pass it in in MXSymbolCreateAtomicSymbol, With key = key_var_num_args, and value = number of positional arguments. return_typeReturn type of the function, can be Symbol or Symbol[] 0 when success, -1 when failure happens ","AtomicSymbolCreator","creator","the AtomicSymbolCreator. ","","AtomicSymbolCreator","AtomicSymbolCreator"
"MXSymbolGetAtomicSymbolInfo","int","Get the detailed information about atomic symbol. ","creatorthe AtomicSymbolCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. key_var_num_argsThe keyword argument for specifying variable number of arguments. When this parameter has non-zero length, the function allows variable number of positional arguments, and will need the caller to pass it in in MXSymbolCreateAtomicSymbol, With key = key_var_num_args, and value = number of positional arguments. return_typeReturn type of the function, can be Symbol or Symbol[] 0 when success, -1 when failure happens ","const char**","name","the AtomicSymbolCreator. ","out","const char*","IntPtr"
"MXSymbolGetAtomicSymbolInfo","int","Get the detailed information about atomic symbol. ","creatorthe AtomicSymbolCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. key_var_num_argsThe keyword argument for specifying variable number of arguments. When this parameter has non-zero length, the function allows variable number of positional arguments, and will need the caller to pass it in in MXSymbolCreateAtomicSymbol, With key = key_var_num_args, and value = number of positional arguments. return_typeReturn type of the function, can be Symbol or Symbol[] 0 when success, -1 when failure happens ","const char**","description","the AtomicSymbolCreator. ","out","const char*","IntPtr"
"MXSymbolGetAtomicSymbolInfo","int","Get the detailed information about atomic symbol. ","creatorthe AtomicSymbolCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. key_var_num_argsThe keyword argument for specifying variable number of arguments. When this parameter has non-zero length, the function allows variable number of positional arguments, and will need the caller to pass it in in MXSymbolCreateAtomicSymbol, With key = key_var_num_args, and value = number of positional arguments. return_typeReturn type of the function, can be Symbol or Symbol[] 0 when success, -1 when failure happens ","mx_uint*","num_args","the AtomicSymbolCreator. ","out","mx_uint","mx_uint"
"MXSymbolGetAtomicSymbolInfo","int","Get the detailed information about atomic symbol. ","creatorthe AtomicSymbolCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. key_var_num_argsThe keyword argument for specifying variable number of arguments. When this parameter has non-zero length, the function allows variable number of positional arguments, and will need the caller to pass it in in MXSymbolCreateAtomicSymbol, With key = key_var_num_args, and value = number of positional arguments. return_typeReturn type of the function, can be Symbol or Symbol[] 0 when success, -1 when failure happens ","const char***","arg_names","the AtomicSymbolCreator. ","out","const char**","IntPtr"
"MXSymbolGetAtomicSymbolInfo","int","Get the detailed information about atomic symbol. ","creatorthe AtomicSymbolCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. key_var_num_argsThe keyword argument for specifying variable number of arguments. When this parameter has non-zero length, the function allows variable number of positional arguments, and will need the caller to pass it in in MXSymbolCreateAtomicSymbol, With key = key_var_num_args, and value = number of positional arguments. return_typeReturn type of the function, can be Symbol or Symbol[] 0 when success, -1 when failure happens ","const char***","arg_type_infos","the AtomicSymbolCreator. ","out","const char**","IntPtr"
"MXSymbolGetAtomicSymbolInfo","int","Get the detailed information about atomic symbol. ","creatorthe AtomicSymbolCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. key_var_num_argsThe keyword argument for specifying variable number of arguments. When this parameter has non-zero length, the function allows variable number of positional arguments, and will need the caller to pass it in in MXSymbolCreateAtomicSymbol, With key = key_var_num_args, and value = number of positional arguments. return_typeReturn type of the function, can be Symbol or Symbol[] 0 when success, -1 when failure happens ","const char***","arg_descriptions","the AtomicSymbolCreator. ","out","const char**","IntPtr"
"MXSymbolGetAtomicSymbolInfo","int","Get the detailed information about atomic symbol. ","creatorthe AtomicSymbolCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. key_var_num_argsThe keyword argument for specifying variable number of arguments. When this parameter has non-zero length, the function allows variable number of positional arguments, and will need the caller to pass it in in MXSymbolCreateAtomicSymbol, With key = key_var_num_args, and value = number of positional arguments. return_typeReturn type of the function, can be Symbol or Symbol[] 0 when success, -1 when failure happens ","const char**","key_var_num_args","the AtomicSymbolCreator. ","out","const char*","IntPtr"
"MXSymbolGetAtomicSymbolInfo","int","Get the detailed information about atomic symbol. ","creatorthe AtomicSymbolCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. key_var_num_argsThe keyword argument for specifying variable number of arguments. When this parameter has non-zero length, the function allows variable number of positional arguments, and will need the caller to pass it in in MXSymbolCreateAtomicSymbol, With key = key_var_num_args, and value = number of positional arguments. return_typeReturn type of the function, can be Symbol or Symbol[] 0 when success, -1 when failure happens ","const char**","return_type","the AtomicSymbolCreator. ","out","const char*","IntPtr"
"MXSymbolCreateAtomicSymbol","int","Create an AtomicSymbol. ","creatorthe AtomicSymbolCreator num_paramthe number of parameters keysthe keys to the params valsthe vals of the params outpointer to the created symbol handle 0 when success, -1 when failure happens ","AtomicSymbolCreator","creator","the AtomicSymbolCreator ","","AtomicSymbolCreator","AtomicSymbolCreator"
"MXSymbolCreateAtomicSymbol","int","Create an AtomicSymbol. ","creatorthe AtomicSymbolCreator num_paramthe number of parameters keysthe keys to the params valsthe vals of the params outpointer to the created symbol handle 0 when success, -1 when failure happens ","mx_uint","num_param","the AtomicSymbolCreator ","","mx_uint","mx_uint"
"MXSymbolCreateAtomicSymbol","int","Create an AtomicSymbol. ","creatorthe AtomicSymbolCreator num_paramthe number of parameters keysthe keys to the params valsthe vals of the params outpointer to the created symbol handle 0 when success, -1 when failure happens ","const char**","keys","the AtomicSymbolCreator ","","const char**","string[]"
"MXSymbolCreateAtomicSymbol","int","Create an AtomicSymbol. ","creatorthe AtomicSymbolCreator num_paramthe number of parameters keysthe keys to the params valsthe vals of the params outpointer to the created symbol handle 0 when success, -1 when failure happens ","const char**","vals","the AtomicSymbolCreator ","","const char**","string[]"
"MXSymbolCreateAtomicSymbol","int","Create an AtomicSymbol. ","creatorthe AtomicSymbolCreator num_paramthe number of parameters keysthe keys to the params valsthe vals of the params outpointer to the created symbol handle 0 when success, -1 when failure happens ","SymbolHandle*","out","the AtomicSymbolCreator ","out","SymbolHandle","SymbolHandle"
"MXSymbolCreateVariable","int","Create a Variable Symbol. ","namename of the variable outpointer to the created symbol handle 0 when success, -1 when failure happens ","const char*","name","name of the variable ","","const char*","string"
"MXSymbolCreateVariable","int","Create a Variable Symbol. ","namename of the variable outpointer to the created symbol handle 0 when success, -1 when failure happens ","SymbolHandle*","out","name of the variable ","out","SymbolHandle","SymbolHandle"
"MXSymbolCreateGroup","int","Create a Symbol by grouping list of symbols together. ","num_symbolsnumber of symbols to be grouped symbolsarray of symbol handles outpointer to the created symbol handle 0 when success, -1 when failure happens ","mx_uint","num_symbols","number of symbols to be grouped ","","mx_uint","mx_uint"
"MXSymbolCreateGroup","int","Create a Symbol by grouping list of symbols together. ","num_symbolsnumber of symbols to be grouped symbolsarray of symbol handles outpointer to the created symbol handle 0 when success, -1 when failure happens ","SymbolHandle*","symbols","number of symbols to be grouped ","","SymbolHandle*","IntPtr"
"MXSymbolCreateGroup","int","Create a Symbol by grouping list of symbols together. ","num_symbolsnumber of symbols to be grouped symbolsarray of symbol handles outpointer to the created symbol handle 0 when success, -1 when failure happens ","SymbolHandle*","out","number of symbols to be grouped ","out","SymbolHandle","SymbolHandle"
"MXSymbolCreateFromFile","int","Load a symbol from a json file. ","fnamethe file name. outthe output symbol. 0 when success, -1 when failure happens ","const char*","fname","the file name. ","","const char*","string"
"MXSymbolCreateFromFile","int","Load a symbol from a json file. ","fnamethe file name. outthe output symbol. 0 when success, -1 when failure happens ","SymbolHandle*","out","the file name. ","out","SymbolHandle","SymbolHandle"
"MXSymbolCreateFromJSON","int","Load a symbol from a json string. ","jsonthe json string. outthe output symbol. 0 when success, -1 when failure happens ","const char*","json","the json string. ","","const char*","string"
"MXSymbolCreateFromJSON","int","Load a symbol from a json string. ","jsonthe json string. outthe output symbol. 0 when success, -1 when failure happens ","SymbolHandle*","out","the json string. ","out","SymbolHandle","SymbolHandle"
"MXSymbolRemoveAmpCast","int","Remove the operators amp_cast and amp_multicast. ","sym_handlethe input symbol. ret_sym_handlethe output symbol. 0 when success, -1 when failure happens ","SymbolHandle","sym_handle","the input symbol. ","","SymbolHandle","SymbolHandle"
"MXSymbolRemoveAmpCast","int","Remove the operators amp_cast and amp_multicast. ","sym_handlethe input symbol. ret_sym_handlethe output symbol. 0 when success, -1 when failure happens ","SymbolHandle*","ret_sym_handle","the input symbol. ","","SymbolHandle*","IntPtr"
"MXSymbolSaveToFile","int","Save a symbol into a json file. ","symbolthe input symbol. fnamethe file name. 0 when success, -1 when failure happens ","SymbolHandle","symbol","the input symbol. ","","SymbolHandle","SymbolHandle"
"MXSymbolSaveToFile","int","Save a symbol into a json file. ","symbolthe input symbol. fnamethe file name. 0 when success, -1 when failure happens ","const char*","fname","the input symbol. ","","const char*","string"
"MXSymbolSaveToJSON","int","Save a symbol into a json string. ","symbolthe input symbol. out_jsonoutput json string. 0 when success, -1 when failure happens ","SymbolHandle","symbol","the input symbol. ","","SymbolHandle","SymbolHandle"
"MXSymbolSaveToJSON","int","Save a symbol into a json string. ","symbolthe input symbol. out_jsonoutput json string. 0 when success, -1 when failure happens ","const char**","out_json","the input symbol. ","out","const char*","IntPtr"
"MXSymbolFree","int","Free the symbol handle. ","symbolthe symbol 0 when success, -1 when failure happens ","SymbolHandle","symbol","the symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolCopy","int","Copy the symbol to another handle. ","symbolthe source symbol outused to hold the result of copy 0 when success, -1 when failure happens ","SymbolHandle","symbol","the source symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolCopy","int","Copy the symbol to another handle. ","symbolthe source symbol outused to hold the result of copy 0 when success, -1 when failure happens ","SymbolHandle*","out","the source symbol ","out","SymbolHandle","SymbolHandle"
"MXSymbolPrint","int","Print the content of symbol, used for debug. ","symbolthe symbol out_strpointer to hold the output string of the printing. 0 when success, -1 when failure happens ","SymbolHandle","symbol","the symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolPrint","int","Print the content of symbol, used for debug. ","symbolthe symbol out_strpointer to hold the output string of the printing. 0 when success, -1 when failure happens ","const char**","out_str","the symbol ","out","const char*","IntPtr"
"MXSymbolGetName","int","Get string name from symbol. ","symbolthe source symbol outThe result name. successWhether the result is contained in out. 0 when success, -1 when failure happens ","SymbolHandle","symbol","the source symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolGetName","int","Get string name from symbol. ","symbolthe source symbol outThe result name. successWhether the result is contained in out. 0 when success, -1 when failure happens ","const char**","out","the source symbol ","out","const char*","IntPtr"
"MXSymbolGetName","int","Get string name from symbol. ","symbolthe source symbol outThe result name. successWhether the result is contained in out. 0 when success, -1 when failure happens ","int*","success","the source symbol ","out","int","int"
"MXSymbolGetAttr","int","Get string attribute from symbol. ","symbolthe source symbol keyThe key of the symbol. outThe result attribute, can be NULL if the attribute do not exist. successWhether the result is contained in out. 0 when success, -1 when failure happens ","SymbolHandle","symbol","the source symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolGetAttr","int","Get string attribute from symbol. ","symbolthe source symbol keyThe key of the symbol. outThe result attribute, can be NULL if the attribute do not exist. successWhether the result is contained in out. 0 when success, -1 when failure happens ","const char*","key","the source symbol ","","const char*","string"
"MXSymbolGetAttr","int","Get string attribute from symbol. ","symbolthe source symbol keyThe key of the symbol. outThe result attribute, can be NULL if the attribute do not exist. successWhether the result is contained in out. 0 when success, -1 when failure happens ","const char**","out","the source symbol ","out","const char*","IntPtr"
"MXSymbolGetAttr","int","Get string attribute from symbol. ","symbolthe source symbol keyThe key of the symbol. outThe result attribute, can be NULL if the attribute do not exist. successWhether the result is contained in out. 0 when success, -1 when failure happens ","int*","success","the source symbol ","out","int","int"
"MXSymbolSetAttr","int","Set string attribute from symbol. NOTE: Setting attribute to a symbol can affect the semantics(mutable/immutable) of symbolic graph. ","Safe recommendaton: use immutable graphOnly allow set attributes during creation of new symbol as optional parameterMutable graph (be careful about the semantics):Allow set attr at any point.Mutating an attribute of some common node of two graphs can cause confusion from user.symbolthe source symbol keyThe key of the symbol. valueThe value to be saved. 0 when success, -1 when failure happens ","SymbolHandle","symbol","the source symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolSetAttr","int","Set string attribute from symbol. NOTE: Setting attribute to a symbol can affect the semantics(mutable/immutable) of symbolic graph. ","Safe recommendaton: use immutable graphOnly allow set attributes during creation of new symbol as optional parameterMutable graph (be careful about the semantics):Allow set attr at any point.Mutating an attribute of some common node of two graphs can cause confusion from user.symbolthe source symbol keyThe key of the symbol. valueThe value to be saved. 0 when success, -1 when failure happens ","const char*","key","the source symbol ","","const char*","string"
"MXSymbolSetAttr","int","Set string attribute from symbol. NOTE: Setting attribute to a symbol can affect the semantics(mutable/immutable) of symbolic graph. ","Safe recommendaton: use immutable graphOnly allow set attributes during creation of new symbol as optional parameterMutable graph (be careful about the semantics):Allow set attr at any point.Mutating an attribute of some common node of two graphs can cause confusion from user.symbolthe source symbol keyThe key of the symbol. valueThe value to be saved. 0 when success, -1 when failure happens ","const char*","value","the source symbol ","","const char*","string"
"MXSymbolListAttr","int","Get all attributes from symbol, including all descendents. ","symbolthe source symbol out_sizeThe number of output attributes out2*out_size strings representing key value pairs. 0 when success, -1 when failure happens ","SymbolHandle","symbol","the source symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolListAttr","int","Get all attributes from symbol, including all descendents. ","symbolthe source symbol out_sizeThe number of output attributes out2*out_size strings representing key value pairs. 0 when success, -1 when failure happens ","mx_uint*","out_size","the source symbol ","out","mx_uint","mx_uint"
"MXSymbolListAttr","int","Get all attributes from symbol, including all descendents. ","symbolthe source symbol out_sizeThe number of output attributes out2*out_size strings representing key value pairs. 0 when success, -1 when failure happens ","const char***","out","the source symbol ","out","const char**","IntPtr"
"MXSymbolListAttrShallow","int","Get all attributes from symbol, excluding descendents. ","symbolthe source symbol out_sizeThe number of output attributes out2*out_size strings representing key value pairs. 0 when success, -1 when failure happens ","SymbolHandle","symbol","the source symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolListAttrShallow","int","Get all attributes from symbol, excluding descendents. ","symbolthe source symbol out_sizeThe number of output attributes out2*out_size strings representing key value pairs. 0 when success, -1 when failure happens ","mx_uint*","out_size","the source symbol ","out","mx_uint","mx_uint"
"MXSymbolListAttrShallow","int","Get all attributes from symbol, excluding descendents. ","symbolthe source symbol out_sizeThe number of output attributes out2*out_size strings representing key value pairs. 0 when success, -1 when failure happens ","const char***","out","the source symbol ","out","const char**","IntPtr"
"MXSymbolListArguments","int","List arguments in the symbol. ","symbolthe symbol out_sizeoutput size out_str_arraypointer to hold the output string array 0 when success, -1 when failure happens ","SymbolHandle","symbol","the symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolListArguments","int","List arguments in the symbol. ","symbolthe symbol out_sizeoutput size out_str_arraypointer to hold the output string array 0 when success, -1 when failure happens ","mx_uint*","out_size","the symbol ","out","mx_uint","mx_uint"
"MXSymbolListArguments","int","List arguments in the symbol. ","symbolthe symbol out_sizeoutput size out_str_arraypointer to hold the output string array 0 when success, -1 when failure happens ","const char***","out_str_array","the symbol ","out","const char**","IntPtr"
"MXSymbolListArguments64","int","","","SymbolHandle","symbol","","","SymbolHandle","SymbolHandle"
"MXSymbolListArguments64","int","","","size_t*","out_size","","out","size_t","size_t"
"MXSymbolListArguments64","int","","","const char***","out_str_array","","out","const char**","IntPtr"
"MXSymbolListOutputs","int","List returns in the symbol. ","symbolthe symbol out_sizeoutput size out_str_arraypointer to hold the output string array 0 when success, -1 when failure happens ","SymbolHandle","symbol","the symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolListOutputs","int","List returns in the symbol. ","symbolthe symbol out_sizeoutput size out_str_arraypointer to hold the output string array 0 when success, -1 when failure happens ","mx_uint*","out_size","the symbol ","out","mx_uint","mx_uint"
"MXSymbolListOutputs","int","List returns in the symbol. ","symbolthe symbol out_sizeoutput size out_str_arraypointer to hold the output string array 0 when success, -1 when failure happens ","const char***","out_str_array","the symbol ","out","const char**","IntPtr"
"MXSymbolListOutputs64","int","","","SymbolHandle","symbol","","","SymbolHandle","SymbolHandle"
"MXSymbolListOutputs64","int","","","size_t*","out_size","","out","size_t","size_t"
"MXSymbolListOutputs64","int","","","const char***","out_str_array","","out","const char**","IntPtr"
"MXSymbolGetNumOutputs","int","Get number of outputs of the symbol. ","symbolThe symbol out_sizenumber of outputs 0 when success, -1 when failure happens ","SymbolHandle","symbol","The symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolGetNumOutputs","int","Get number of outputs of the symbol. ","symbolThe symbol out_sizenumber of outputs 0 when success, -1 when failure happens ","mx_uint*","output_count","","out","mx_uint","mx_uint"
"MXSymbolGetInternals","int","Get a symbol that contains all the internals. ","symbolThe symbol outThe output symbol whose outputs are all the internals. 0 when success, -1 when failure happens ","SymbolHandle","symbol","The symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolGetInternals","int","Get a symbol that contains all the internals. ","symbolThe symbol outThe output symbol whose outputs are all the internals. 0 when success, -1 when failure happens ","SymbolHandle*","out","The symbol ","out","SymbolHandle","SymbolHandle"
"MXSymbolGetChildren","int","Get a symbol that contains only direct children. ","symbolThe symbol outThe output symbol whose outputs are the direct children. 0 when success, -1 when failure happens ","SymbolHandle","symbol","The symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolGetChildren","int","Get a symbol that contains only direct children. ","symbolThe symbol outThe output symbol whose outputs are the direct children. 0 when success, -1 when failure happens ","SymbolHandle*","out","The symbol ","out","SymbolHandle","SymbolHandle"
"MXSymbolGetOutput","int","Get index-th outputs of the symbol. ","symbolThe symbol indexthe Index of the output. outThe output symbol whose outputs are the index-th symbol. 0 when success, -1 when failure happens ","SymbolHandle","symbol","The symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolGetOutput","int","Get index-th outputs of the symbol. ","symbolThe symbol indexthe Index of the output. outThe output symbol whose outputs are the index-th symbol. 0 when success, -1 when failure happens ","mx_uint","index","The symbol ","","mx_uint","mx_uint"
"MXSymbolGetOutput","int","Get index-th outputs of the symbol. ","symbolThe symbol indexthe Index of the output. outThe output symbol whose outputs are the index-th symbol. 0 when success, -1 when failure happens ","SymbolHandle*","out","The symbol ","out","SymbolHandle","SymbolHandle"
"MXSymbolListAuxiliaryStates","int","List auxiliary states in the symbol. ","symbolthe symbol out_sizeoutput size out_str_arraypointer to hold the output string array 0 when success, -1 when failure happens ","SymbolHandle","symbol","the symbol ","","SymbolHandle","SymbolHandle"
"MXSymbolListAuxiliaryStates","int","List auxiliary states in the symbol. ","symbolthe symbol out_sizeoutput size out_str_arraypointer to hold the output string array 0 when success, -1 when failure happens ","mx_uint*","out_size","the symbol ","out","mx_uint","mx_uint"
"MXSymbolListAuxiliaryStates","int","List auxiliary states in the symbol. ","symbolthe symbol out_sizeoutput size out_str_arraypointer to hold the output string array 0 when success, -1 when failure happens ","const char***","out_str_array","the symbol ","out","const char**","IntPtr"
"MXSymbolListAuxiliaryStates64","int","","","SymbolHandle","symbol","","","SymbolHandle","SymbolHandle"
"MXSymbolListAuxiliaryStates64","int","","","size_t*","out_size","","out","size_t","size_t"
"MXSymbolListAuxiliaryStates64","int","","","const char***","out_str_array","","out","const char**","IntPtr"
"MXSymbolCompose","int","Compose the symbol on other symbols. ","This function will change the sym hanlde. To achieve function apply behavior, copy the symbol first before apply.symthe symbol to apply namethe name of symbol num_argsnumber of arguments keysthe key of keyword args (optional) argsarguments to sym 0 when success, -1 when failure happens ","SymbolHandle","sym","the symbol to apply ","","SymbolHandle","SymbolHandle"
"MXSymbolCompose","int","Compose the symbol on other symbols. ","This function will change the sym hanlde. To achieve function apply behavior, copy the symbol first before apply.symthe symbol to apply namethe name of symbol num_argsnumber of arguments keysthe key of keyword args (optional) argsarguments to sym 0 when success, -1 when failure happens ","const char*","name","the symbol to apply ","","const char*","string"
"MXSymbolCompose","int","Compose the symbol on other symbols. ","This function will change the sym hanlde. To achieve function apply behavior, copy the symbol first before apply.symthe symbol to apply namethe name of symbol num_argsnumber of arguments keysthe key of keyword args (optional) argsarguments to sym 0 when success, -1 when failure happens ","mx_uint","num_args","the symbol to apply ","","mx_uint","mx_uint"
"MXSymbolCompose","int","Compose the symbol on other symbols. ","This function will change the sym hanlde. To achieve function apply behavior, copy the symbol first before apply.symthe symbol to apply namethe name of symbol num_argsnumber of arguments keysthe key of keyword args (optional) argsarguments to sym 0 when success, -1 when failure happens ","const char**","keys","the symbol to apply ","","const char**","string[]"
"MXSymbolCompose","int","Compose the symbol on other symbols. ","This function will change the sym hanlde. To achieve function apply behavior, copy the symbol first before apply.symthe symbol to apply namethe name of symbol num_argsnumber of arguments keysthe key of keyword args (optional) argsarguments to sym 0 when success, -1 when failure happens ","SymbolHandle*","args","the symbol to apply ","","SymbolHandle*","IntPtr"
"MXSymbolGrad","int","Get the gradient graph of the symbol. ","symthe symbol to get gradient num_wrtnumber of arguments to get gradient wrtthe name of the arguments to get gradient outthe returned symbol that has gradient 0 when success, -1 when failure happens ","SymbolHandle","sym","the symbol to get gradient ","","SymbolHandle","SymbolHandle"
"MXSymbolGrad","int","Get the gradient graph of the symbol. ","symthe symbol to get gradient num_wrtnumber of arguments to get gradient wrtthe name of the arguments to get gradient outthe returned symbol that has gradient 0 when success, -1 when failure happens ","mx_uint","num_wrt","the symbol to get gradient ","","mx_uint","mx_uint"
"MXSymbolGrad","int","Get the gradient graph of the symbol. ","symthe symbol to get gradient num_wrtnumber of arguments to get gradient wrtthe name of the arguments to get gradient outthe returned symbol that has gradient 0 when success, -1 when failure happens ","const char**","wrt","the symbol to get gradient ","","const char**","string[]"
"MXSymbolGrad","int","Get the gradient graph of the symbol. ","symthe symbol to get gradient num_wrtnumber of arguments to get gradient wrtthe name of the arguments to get gradient outthe returned symbol that has gradient 0 when success, -1 when failure happens ","SymbolHandle*","out","the symbol to get gradient ","out","SymbolHandle","SymbolHandle"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","SymbolHandle","sym","symbol handle ","","SymbolHandle","SymbolHandle"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint","num_args","symbol handle ","","mx_uint","mx_uint"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const char**","keys","symbol handle ","","const char**","string[]"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint*","arg_ind_ptr","symbol handle ","","const mx_uint*","mx_uint[]"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint*","arg_shape_data","symbol handle ","","const mx_uint*","mx_uint[]"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","in_shape_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint**","in_shape_ndim","symbol handle ","","const mx_uint**","IntPtr"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint***","in_shape_data","symbol handle ","","const mx_uint***","IntPtr"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","out_shape_size","symbol handle ","out","mx_uint","mx_uint"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint**","out_shape_ndim","symbol handle ","out","const mx_uint*","IntPtr"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint***","out_shape_data","symbol handle ","out","const mx_uint**","IntPtr"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","aux_shape_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint**","aux_shape_ndim","symbol handle ","","const mx_uint**","IntPtr"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint***","aux_shape_data","symbol handle ","","const mx_uint***","IntPtr"
"MXSymbolInferShape","int","DEPRECATED. Use MXSymbolInferShapeEx instead. infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","int*","complete","symbol handle ","","int*","IntPtr"
"MXSymbolInferShape64","int","","","SymbolHandle","sym","","","SymbolHandle","SymbolHandle"
"MXSymbolInferShape64","int","","","mx_uint","num_args","","","mx_uint","mx_uint"
"MXSymbolInferShape64","int","","","const char**","keys","","","const char**","string[]"
"MXSymbolInferShape64","int","","","const mx_int64*","arg_ind_ptr","","","const mx_int64*","mx_int64[]"
"MXSymbolInferShape64","int","","","const mx_int64*","arg_shape_data","","","const mx_int64*","mx_int64[]"
"MXSymbolInferShape64","int","","","size_t*","in_shape_size","","","size_t*","IntPtr"
"MXSymbolInferShape64","int","","","const int**","in_shape_ndim","","","const int**","IntPtr"
"MXSymbolInferShape64","int","","","const mx_int64***","in_shape_data","","","const mx_int64***","IntPtr"
"MXSymbolInferShape64","int","","","size_t*","out_shape_size","","out","size_t","size_t"
"MXSymbolInferShape64","int","","","const int**","out_shape_ndim","","out","const int*","IntPtr"
"MXSymbolInferShape64","int","","","const mx_int64***","out_shape_data","","out","const mx_int64**","IntPtr"
"MXSymbolInferShape64","int","","","size_t*","aux_shape_size","","","size_t*","IntPtr"
"MXSymbolInferShape64","int","","","const int**","aux_shape_ndim","","","const int**","IntPtr"
"MXSymbolInferShape64","int","","","const mx_int64***","aux_shape_data","","","const mx_int64***","IntPtr"
"MXSymbolInferShape64","int","","","int*","complete","","out","int","int"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","SymbolHandle","sym","symbol handle ","","SymbolHandle","SymbolHandle"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint","num_args","symbol handle ","","mx_uint","mx_uint"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const char**","keys","symbol handle ","","const char**","string[]"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint*","arg_ind_ptr","symbol handle ","","const mx_uint*","mx_uint[]"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int*","arg_shape_data","symbol handle ","","const int*","int[]"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","in_shape_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int**","in_shape_ndim","symbol handle ","","const int**","IntPtr"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int***","in_shape_data","symbol handle ","","const int***","IntPtr"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","out_shape_size","symbol handle ","out","mx_uint","mx_uint"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int**","out_shape_ndim","symbol handle ","out","const int*","IntPtr"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int***","out_shape_data","symbol handle ","out","const int**","IntPtr"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","aux_shape_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int**","aux_shape_ndim","symbol handle ","","const int**","IntPtr"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int***","aux_shape_data","symbol handle ","","const int***","IntPtr"
"MXSymbolInferShapeEx","int","infer shape of unknown input shapes given the known one. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","int*","complete","symbol handle ","out","int","int"
"MXSymbolInferShapeEx64","int","","","SymbolHandle","sym","","","SymbolHandle","SymbolHandle"
"MXSymbolInferShapeEx64","int","","","mx_uint","num_args","","","mx_uint","mx_uint"
"MXSymbolInferShapeEx64","int","","","const char**","keys","","","const char**","string[]"
"MXSymbolInferShapeEx64","int","","","const mx_int64*","arg_ind_ptr","","","const mx_int64*","mx_int64[]"
"MXSymbolInferShapeEx64","int","","","const mx_int64*","arg_shape_data","","","const mx_int64*","mx_int64[]"
"MXSymbolInferShapeEx64","int","","","size_t*","in_shape_size","","","size_t*","IntPtr"
"MXSymbolInferShapeEx64","int","","","const int**","in_shape_ndim","","","const int**","IntPtr"
"MXSymbolInferShapeEx64","int","","","const mx_int64***","in_shape_data","","","const mx_int64***","IntPtr"
"MXSymbolInferShapeEx64","int","","","size_t*","out_shape_size","","out","size_t","size_t"
"MXSymbolInferShapeEx64","int","","","const int**","out_shape_ndim","","out","const int*","IntPtr"
"MXSymbolInferShapeEx64","int","","","const mx_int64***","out_shape_data","","out","const mx_int64**","IntPtr"
"MXSymbolInferShapeEx64","int","","","size_t*","aux_shape_size","","","size_t*","IntPtr"
"MXSymbolInferShapeEx64","int","","","const int**","aux_shape_ndim","","","const int**","IntPtr"
"MXSymbolInferShapeEx64","int","","","const mx_int64***","aux_shape_data","","","const mx_int64***","IntPtr"
"MXSymbolInferShapeEx64","int","","","int*","complete","","out","int","int"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","SymbolHandle","sym","symbol handle ","","SymbolHandle","SymbolHandle"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint","num_args","symbol handle ","","mx_uint","mx_uint"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const char**","keys","symbol handle ","","const char**","string[]"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint*","arg_ind_ptr","symbol handle ","","const mx_uint*","mx_uint[]"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint*","arg_shape_data","symbol handle ","","const mx_uint*","mx_uint[]"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","in_shape_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint**","in_shape_ndim","symbol handle ","","const mx_uint**","IntPtr"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint***","in_shape_data","symbol handle ","","const mx_uint***","IntPtr"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","out_shape_size","symbol handle ","out","mx_uint","mx_uint"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint**","out_shape_ndim","symbol handle ","out","const mx_uint*","IntPtr"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint***","out_shape_data","symbol handle ","out","const mx_uint**","IntPtr"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","aux_shape_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint**","aux_shape_ndim","symbol handle ","","const mx_uint**","IntPtr"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint***","aux_shape_data","symbol handle ","","const mx_uint***","IntPtr"
"MXSymbolInferShapePartial","int","DEPRECATED. Use MXSymbolInferShapePartialEx instead. partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","int*","complete","symbol handle ","out","int","int"
"MXSymbolInferShapePartial64","int","","","SymbolHandle","sym","","","SymbolHandle","SymbolHandle"
"MXSymbolInferShapePartial64","int","","","mx_uint","num_args","","","mx_uint","mx_uint"
"MXSymbolInferShapePartial64","int","","","const char**","keys","","","const char**","string[]"
"MXSymbolInferShapePartial64","int","","","const mx_int64*","arg_ind_ptr","","","const mx_int64*","mx_int64[]"
"MXSymbolInferShapePartial64","int","","","const mx_int64*","arg_shape_data","","","const mx_int64*","mx_int64[]"
"MXSymbolInferShapePartial64","int","","","size_t*","in_shape_size","","","size_t*","IntPtr"
"MXSymbolInferShapePartial64","int","","","const int**","in_shape_ndim","","","const int**","IntPtr"
"MXSymbolInferShapePartial64","int","","","const mx_int64***","in_shape_data","","","const mx_int64***","IntPtr"
"MXSymbolInferShapePartial64","int","","","size_t*","out_shape_size","","out","size_t","size_t"
"MXSymbolInferShapePartial64","int","","","const int**","out_shape_ndim","","out","const int*","IntPtr"
"MXSymbolInferShapePartial64","int","","","const mx_int64***","out_shape_data","","out","const mx_int64**","IntPtr"
"MXSymbolInferShapePartial64","int","","","size_t*","aux_shape_size","","","size_t*","IntPtr"
"MXSymbolInferShapePartial64","int","","","const int**","aux_shape_ndim","","","const int**","IntPtr"
"MXSymbolInferShapePartial64","int","","","const mx_int64***","aux_shape_data","","","const mx_int64***","IntPtr"
"MXSymbolInferShapePartial64","int","","","int*","complete","","out","int","int"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","SymbolHandle","sym","symbol handle ","","SymbolHandle","SymbolHandle"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint","num_args","symbol handle ","","mx_uint","mx_uint"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const char**","keys","symbol handle ","","const char**","string[]"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const mx_uint*","arg_ind_ptr","symbol handle ","","const mx_uint*","mx_uint[]"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int*","arg_shape_data","symbol handle ","","const int*","int[]"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","in_shape_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int**","in_shape_ndim","symbol handle ","","const int**","IntPtr"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int***","in_shape_data","symbol handle ","","const int***","IntPtr"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","out_shape_size","symbol handle ","out","mx_uint","mx_uint"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int**","out_shape_ndim","symbol handle ","out","const int*","IntPtr"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int***","out_shape_data","symbol handle ","out","const int**","IntPtr"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","aux_shape_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int**","aux_shape_ndim","symbol handle ","","const int**","IntPtr"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","const int***","aux_shape_data","symbol handle ","","const int***","IntPtr"
"MXSymbolInferShapePartialEx","int","partially infer shape of unknown input shapes given the known one. ","Return partially inferred results if not all shapes could be inferred. The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_ind_ptrthe head pointer of the rows in CSR arg_shape_datathe content of the CSR in_shape_sizesizeof the returning array of in_shapes in_shape_ndimreturning array of shape dimensions of eachs input shape. in_shape_datareturning array of pointers to head of the input shape. out_shape_sizesizeof the returning array of out_shapes out_shape_ndimreturning array of shape dimensions of eachs input shape. out_shape_datareturning array of pointers to head of the input shape. aux_shape_sizesizeof the returning array of aux_shapes aux_shape_ndimreturning array of shape dimensions of eachs auxiliary shape. aux_shape_datareturning array of pointers to head of the auxiliary shape. completewhether infer shape completes or more information is needed. 0 when success, -1 when failure happens ","int*","complete","symbol handle ","out","int","int"
"MXSymbolInferShapePartialEx64","int","","","SymbolHandle","sym","","","SymbolHandle","SymbolHandle"
"MXSymbolInferShapePartialEx64","int","","","mx_uint","num_args","","","mx_uint","mx_uint"
"MXSymbolInferShapePartialEx64","int","","","const char**","keys","","","const char**","string[]"
"MXSymbolInferShapePartialEx64","int","","","const mx_int64*","arg_ind_ptr","","","const mx_int64*","mx_int64[]"
"MXSymbolInferShapePartialEx64","int","","","const mx_int64*","arg_shape_data","","","const mx_int64*","mx_int64[]"
"MXSymbolInferShapePartialEx64","int","","","size_t*","in_shape_size","","","size_t*","IntPtr"
"MXSymbolInferShapePartialEx64","int","","","const int**","in_shape_ndim","","","const int**","IntPtr"
"MXSymbolInferShapePartialEx64","int","","","const mx_int64***","in_shape_data","","","const mx_int64***","IntPtr"
"MXSymbolInferShapePartialEx64","int","","","size_t*","out_shape_size","","out","size_t","size_t"
"MXSymbolInferShapePartialEx64","int","","","const int**","out_shape_ndim","","out","const int*","IntPtr"
"MXSymbolInferShapePartialEx64","int","","","const mx_int64***","out_shape_data","","out","const mx_int64**","IntPtr"
"MXSymbolInferShapePartialEx64","int","","","size_t*","aux_shape_size","","","size_t*","IntPtr"
"MXSymbolInferShapePartialEx64","int","","","const int**","aux_shape_ndim","","","const int**","IntPtr"
"MXSymbolInferShapePartialEx64","int","","","const mx_int64***","aux_shape_data","","","const mx_int64***","IntPtr"
"MXSymbolInferShapePartialEx64","int","","","int*","complete","","out","int","int"
"MXSymbolInferType","int","infer type of unknown input types given the known one. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","SymbolHandle","sym","symbol handle ","","SymbolHandle","SymbolHandle"
"MXSymbolInferType","int","infer type of unknown input types given the known one. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint","num_args","symbol handle ","","mx_uint","mx_uint"
"MXSymbolInferType","int","infer type of unknown input types given the known one. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","const char**","keys","symbol handle ","","const char**","string[]"
"MXSymbolInferType","int","infer type of unknown input types given the known one. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","const int*","arg_type_data","symbol handle ","","const int*","int[]"
"MXSymbolInferType","int","infer type of unknown input types given the known one. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","in_type_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferType","int","infer type of unknown input types given the known one. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","const int**","in_type_data","symbol handle ","","const int**","IntPtr"
"MXSymbolInferType","int","infer type of unknown input types given the known one. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","out_type_size","symbol handle ","out","mx_uint","mx_uint"
"MXSymbolInferType","int","infer type of unknown input types given the known one. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","const int**","out_type_data","symbol handle ","out","const int*","IntPtr"
"MXSymbolInferType","int","infer type of unknown input types given the known one. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","aux_type_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferType","int","infer type of unknown input types given the known one. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","const int**","aux_type_data","symbol handle ","","const int**","IntPtr"
"MXSymbolInferType","int","infer type of unknown input types given the known one. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional. ","symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","int*","complete","symbol handle ","out","int","int"
"MXSymbolInferTypePartial","int","partially infer type of unknown input types given the known one. ","Return partially inferred results if not all types could be inferred. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","SymbolHandle","sym","symbol handle ","","SymbolHandle","SymbolHandle"
"MXSymbolInferTypePartial","int","partially infer type of unknown input types given the known one. ","Return partially inferred results if not all types could be inferred. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint","num_args","symbol handle ","","mx_uint","mx_uint"
"MXSymbolInferTypePartial","int","partially infer type of unknown input types given the known one. ","Return partially inferred results if not all types could be inferred. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","const char**","keys","symbol handle ","","const char**","string[]"
"MXSymbolInferTypePartial","int","partially infer type of unknown input types given the known one. ","Return partially inferred results if not all types could be inferred. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","const int*","arg_type_data","symbol handle ","","const int*","int[]"
"MXSymbolInferTypePartial","int","partially infer type of unknown input types given the known one. ","Return partially inferred results if not all types could be inferred. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","in_type_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferTypePartial","int","partially infer type of unknown input types given the known one. ","Return partially inferred results if not all types could be inferred. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","const int**","in_type_data","symbol handle ","","const int**","IntPtr"
"MXSymbolInferTypePartial","int","partially infer type of unknown input types given the known one. ","Return partially inferred results if not all types could be inferred. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","out_type_size","symbol handle ","out","mx_uint","mx_uint"
"MXSymbolInferTypePartial","int","partially infer type of unknown input types given the known one. ","Return partially inferred results if not all types could be inferred. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","const int**","out_type_data","symbol handle ","out","const int*","IntPtr"
"MXSymbolInferTypePartial","int","partially infer type of unknown input types given the known one. ","Return partially inferred results if not all types could be inferred. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","mx_uint*","aux_type_size","symbol handle ","","mx_uint*","IntPtr"
"MXSymbolInferTypePartial","int","partially infer type of unknown input types given the known one. ","Return partially inferred results if not all types could be inferred. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","const int**","aux_type_data","symbol handle ","","const int**","IntPtr"
"MXSymbolInferTypePartial","int","partially infer type of unknown input types given the known one. ","Return partially inferred results if not all types could be inferred. The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.symsymbol handle num_argsnumbe of input arguments. keysthe key of keyword args (optional) arg_type_datathe content of the CSR in_type_sizesizeof the returning array of in_types in_type_datareturning array of pointers to head of the input type. out_type_sizesizeof the returning array of out_types out_type_datareturning array of pointers to head of the input type. aux_type_sizesizeof the returning array of aux_types aux_type_datareturning array of pointers to head of the auxiliary type. completewhether infer type completes or more information is needed. 0 when success, -1 when failure happens ","int*","complete","symbol handle ","out","int","int"
"MXQuantizeSymbol","int","Convert a symbol into a quantized symbol where FP32 operators are replaced with INT8. ","sym_handlesymbol to be converted ret_sym_handlequantized symbol result num_excluded_symbolsnumber of layers excluded from being quantized in the input symbol excluded_symbolsop names to be excluded from being quantized num_offlinenumber of parameters that are quantized offline offline_paramsarray of c strings representing the names of params quantized offline quantized_dtypethe quantized destination type for input data calib_quantizeDeprecated. quantize op will always be calibrated if could ","SymbolHandle","sym_handle","symbol to be converted ","","SymbolHandle","SymbolHandle"
"MXQuantizeSymbol","int","Convert a symbol into a quantized symbol where FP32 operators are replaced with INT8. ","sym_handlesymbol to be converted ret_sym_handlequantized symbol result num_excluded_symbolsnumber of layers excluded from being quantized in the input symbol excluded_symbolsop names to be excluded from being quantized num_offlinenumber of parameters that are quantized offline offline_paramsarray of c strings representing the names of params quantized offline quantized_dtypethe quantized destination type for input data calib_quantizeDeprecated. quantize op will always be calibrated if could ","SymbolHandle*","ret_sym_handle","symbol to be converted ","","SymbolHandle*","IntPtr"
"MXQuantizeSymbol","int","Convert a symbol into a quantized symbol where FP32 operators are replaced with INT8. ","sym_handlesymbol to be converted ret_sym_handlequantized symbol result num_excluded_symbolsnumber of layers excluded from being quantized in the input symbol excluded_symbolsop names to be excluded from being quantized num_offlinenumber of parameters that are quantized offline offline_paramsarray of c strings representing the names of params quantized offline quantized_dtypethe quantized destination type for input data calib_quantizeDeprecated. quantize op will always be calibrated if could ","const mx_uint","num_excluded_symbols","symbol to be converted ","","const mx_uint","mx_uint"
"MXQuantizeSymbol","int","Convert a symbol into a quantized symbol where FP32 operators are replaced with INT8. ","sym_handlesymbol to be converted ret_sym_handlequantized symbol result num_excluded_symbolsnumber of layers excluded from being quantized in the input symbol excluded_symbolsop names to be excluded from being quantized num_offlinenumber of parameters that are quantized offline offline_paramsarray of c strings representing the names of params quantized offline quantized_dtypethe quantized destination type for input data calib_quantizeDeprecated. quantize op will always be calibrated if could ","const char**","excluded_symbols","symbol to be converted ","","const char**","string[]"
"MXQuantizeSymbol","int","Convert a symbol into a quantized symbol where FP32 operators are replaced with INT8. ","sym_handlesymbol to be converted ret_sym_handlequantized symbol result num_excluded_symbolsnumber of layers excluded from being quantized in the input symbol excluded_symbolsop names to be excluded from being quantized num_offlinenumber of parameters that are quantized offline offline_paramsarray of c strings representing the names of params quantized offline quantized_dtypethe quantized destination type for input data calib_quantizeDeprecated. quantize op will always be calibrated if could ","const mx_uint","num_offline","symbol to be converted ","","const mx_uint","mx_uint"
"MXQuantizeSymbol","int","Convert a symbol into a quantized symbol where FP32 operators are replaced with INT8. ","sym_handlesymbol to be converted ret_sym_handlequantized symbol result num_excluded_symbolsnumber of layers excluded from being quantized in the input symbol excluded_symbolsop names to be excluded from being quantized num_offlinenumber of parameters that are quantized offline offline_paramsarray of c strings representing the names of params quantized offline quantized_dtypethe quantized destination type for input data calib_quantizeDeprecated. quantize op will always be calibrated if could ","const char**","offline_params","symbol to be converted ","","const char**","string[]"
"MXQuantizeSymbol","int","Convert a symbol into a quantized symbol where FP32 operators are replaced with INT8. ","sym_handlesymbol to be converted ret_sym_handlequantized symbol result num_excluded_symbolsnumber of layers excluded from being quantized in the input symbol excluded_symbolsop names to be excluded from being quantized num_offlinenumber of parameters that are quantized offline offline_paramsarray of c strings representing the names of params quantized offline quantized_dtypethe quantized destination type for input data calib_quantizeDeprecated. quantize op will always be calibrated if could ","const char*","quantized_dtype","symbol to be converted ","","const char*","string"
"MXQuantizeSymbol","int","Convert a symbol into a quantized symbol where FP32 operators are replaced with INT8. ","sym_handlesymbol to be converted ret_sym_handlequantized symbol result num_excluded_symbolsnumber of layers excluded from being quantized in the input symbol excluded_symbolsop names to be excluded from being quantized num_offlinenumber of parameters that are quantized offline offline_paramsarray of c strings representing the names of params quantized offline quantized_dtypethe quantized destination type for input data calib_quantizeDeprecated. quantize op will always be calibrated if could ","const bool","calib_quantize","symbol to be converted ","","const bool","bool"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","SymbolHandle","sym_handle","symbol to be converted ","","SymbolHandle","SymbolHandle"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","SymbolHandle*","ret_sym_handle","symbol to be converted ","","SymbolHandle*","IntPtr"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","mx_uint","num_args","symbol to be converted ","","mx_uint","mx_uint"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const int*","arg_type_data","symbol to be converted ","","const int*","int[]"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","mx_uint","num_ind_ptr","","","mx_uint","mx_uint"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const int*","ind_ptr","","","const int*","int[]"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const int*","target_dtype","symbol to be converted ","","const int*","int[]"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const int","cast_optional_params","symbol to be converted ","","const int","int"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const mx_uint","num_target_dtype_op_names","symbol to be converted ","","const mx_uint","mx_uint"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const mx_uint","num_fp32_op_names","symbol to be converted ","","const mx_uint","mx_uint"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const mx_uint","num_widest_dtype_op_names","symbol to be converted ","","const mx_uint","mx_uint"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const mx_uint","num_conditional_fp32_op_names","symbol to be converted ","","const mx_uint","mx_uint"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const mx_uint","num_excluded_symbols","symbol to be converted ","","const mx_uint","mx_uint"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const mx_uint","num_model_params","symbol to be converted ","","const mx_uint","mx_uint"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const char**","target_dtype_op_names","symbol to be converted ","","const char**","string[]"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const char**","fp32_op_names","symbol to be converted ","","const char**","string[]"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const char**","widest_dtype_op_names","symbol to be converted ","","const char**","string[]"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const char**","conditional_fp32_op_names","symbol to be converted ","","const char**","string[]"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const char**","excluded_symbols","symbol to be converted ","","const char**","string[]"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const char**","conditional_param_names","","","const char**","string[]"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const char**","conditional_param_vals","","","const char**","string[]"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const char**","model_param_names","symbol to be converted ","","const char**","string[]"
"MXReducePrecisionSymbol","int","Convert a symbol into a mixed precision symbol with cast operators for target dtype casting. ","sym_handlesymbol to be converted ret_sym_handlemixed precision symbol result num_argsnumber of arguments for known dtypes arg_type_dataarg types of the arguments target_dtypetarget_dtype for mixed precision symbol cast_optional_paramswhether to cast optional params to target_dtype num_target_dtype_op_namesnumber of ops to be casted to target_dtype num_fp32_op_namesnumber of ops to be casted to FP32 num_widest_dtype_op_namesnumber of ops to be casted to widest dtype num_conditional_fp32_op_namesnumber of ops to be casted to FP32 based on a condition num_excluded_symbolsnumber of symbols to be excluded from casting num_model_paramsnumber of model parameters num_widest_dtype_op_namesnumber of ops to be casted to the widest dtype num_conditional_fp32_op_namesnumber of ops to be cast to fp32 based on precision target_dtype_op_namesop names to be casted to target_dtype fp32_op_namesop names to be casted to fp32 widest_dtype_op_namesnames to be casted to widest dtype conditional_fp32_op_namesnames to be casted to FP32 conditionally excluded_symbolssymbol names to be excluded from casting param_namesparam names for conditional FP32 casting param_valuesparam values for conditional FP32 casting arg_namesargument names for which type information is provided model_param_namesnames for model parameters ","const char**","arg_names","symbol to be converted ","","const char**","string[]"
"MXSetCalibTableToQuantizedSymbol","int","Set calibration table to node attributes in the sym. ","sym_handlesymbol whose node attributes are to be set by calibration table num_layersnumber of layers in the calibration table layernames stored as keys in the calibration table low_quantileslow quantiles of layers stored in the calibration table high_quantileshigh quantiles of layers stored in the calibration table ret_sym_handlereturned symbol ","SymbolHandle","qsym_handle","","","SymbolHandle","SymbolHandle"
"MXSetCalibTableToQuantizedSymbol","int","Set calibration table to node attributes in the sym. ","sym_handlesymbol whose node attributes are to be set by calibration table num_layersnumber of layers in the calibration table layernames stored as keys in the calibration table low_quantileslow quantiles of layers stored in the calibration table high_quantileshigh quantiles of layers stored in the calibration table ret_sym_handlereturned symbol ","const mx_uint","num_layers","symbol whose node attributes are to be set by calibration table ","","const mx_uint","mx_uint"
"MXSetCalibTableToQuantizedSymbol","int","Set calibration table to node attributes in the sym. ","sym_handlesymbol whose node attributes are to be set by calibration table num_layersnumber of layers in the calibration table layernames stored as keys in the calibration table low_quantileslow quantiles of layers stored in the calibration table high_quantileshigh quantiles of layers stored in the calibration table ret_sym_handlereturned symbol ","const char**","layer_names","","","const char**","string[]"
"MXSetCalibTableToQuantizedSymbol","int","Set calibration table to node attributes in the sym. ","sym_handlesymbol whose node attributes are to be set by calibration table num_layersnumber of layers in the calibration table layernames stored as keys in the calibration table low_quantileslow quantiles of layers stored in the calibration table high_quantileshigh quantiles of layers stored in the calibration table ret_sym_handlereturned symbol ","const float*","low_quantiles","symbol whose node attributes are to be set by calibration table ","","const float*","IntPtr"
"MXSetCalibTableToQuantizedSymbol","int","Set calibration table to node attributes in the sym. ","sym_handlesymbol whose node attributes are to be set by calibration table num_layersnumber of layers in the calibration table layernames stored as keys in the calibration table low_quantileslow quantiles of layers stored in the calibration table high_quantileshigh quantiles of layers stored in the calibration table ret_sym_handlereturned symbol ","const float*","high_quantiles","symbol whose node attributes are to be set by calibration table ","","const float*","IntPtr"
"MXSetCalibTableToQuantizedSymbol","int","Set calibration table to node attributes in the sym. ","sym_handlesymbol whose node attributes are to be set by calibration table num_layersnumber of layers in the calibration table layernames stored as keys in the calibration table low_quantileslow quantiles of layers stored in the calibration table high_quantileshigh quantiles of layers stored in the calibration table ret_sym_handlereturned symbol ","SymbolHandle*","ret_sym_handle","symbol whose node attributes are to be set by calibration table ","","SymbolHandle*","IntPtr"
"MXGenBackendSubgraph","int","Run subgraph pass based on the backend provided. ","sym_handlesymbol to be converted backendbackend names for subgraph pass ret_sym_handlereturned symbol ","SymbolHandle","sym_handle","symbol to be converted ","","SymbolHandle","SymbolHandle"
"MXGenBackendSubgraph","int","Run subgraph pass based on the backend provided. ","sym_handlesymbol to be converted backendbackend names for subgraph pass ret_sym_handlereturned symbol ","const char*","backend","symbol to be converted ","","const char*","string"
"MXGenBackendSubgraph","int","Run subgraph pass based on the backend provided. ","sym_handlesymbol to be converted backendbackend names for subgraph pass ret_sym_handlereturned symbol ","SymbolHandle*","ret_sym_handle","symbol to be converted ","out","SymbolHandle","SymbolHandle"
"MXGenAtomicSymbolFromSymbol","int","Generate atomic symbol (able to be composed) from a source symbol. ","sym_handlesource symbol ret_sym_handlereturned atomic symbol ","SymbolHandle","sym_handle","source symbol ","","SymbolHandle","SymbolHandle"
"MXGenAtomicSymbolFromSymbol","int","Generate atomic symbol (able to be composed) from a source symbol. ","sym_handlesource symbol ret_sym_handlereturned atomic symbol ","SymbolHandle*","ret_sym_handle","source symbol ","out","SymbolHandle","SymbolHandle"
"MXExecutorFree","int","Delete the executor. ","handlethe executor. 0 when success, -1 when failure happens ","ExecutorHandle","handle","the executor. ","","ExecutorHandle","ExecutorHandle"
"MXExecutorPrint","int","Print the content of execution plan, used for debug. ","handlethe executor. out_strpointer to hold the output string of the printing. 0 when success, -1 when failure happens ","ExecutorHandle","handle","the executor. ","","ExecutorHandle","ExecutorHandle"
"MXExecutorPrint","int","Print the content of execution plan, used for debug. ","handlethe executor. out_strpointer to hold the output string of the printing. 0 when success, -1 when failure happens ","const char**","out_str","the executor. ","out","const char*","IntPtr"
"MXExecutorForward","int","Executor forward method. ","handleexecutor handle is_trainint value to indicate whether the forward pass is for evaluation 0 when success, -1 when failure happens ","ExecutorHandle","handle","executor handle ","","ExecutorHandle","ExecutorHandle"
"MXExecutorForward","int","Executor forward method. ","handleexecutor handle is_trainint value to indicate whether the forward pass is for evaluation 0 when success, -1 when failure happens ","int","is_train","executor handle ","","int","int"
"MXExecutorBackward","int","Excecutor run backward. ","handleexecute handle lenlenth head_gradsNDArray handle for heads' gradient0 when success, -1 when failure happens ","ExecutorHandle","handle","execute handle ","","ExecutorHandle","ExecutorHandle"
"MXExecutorBackward","int","Excecutor run backward. ","handleexecute handle lenlenth head_gradsNDArray handle for heads' gradient0 when success, -1 when failure happens ","mx_uint","len","execute handle ","","mx_uint","mx_uint"
"MXExecutorBackward","int","Excecutor run backward. ","handleexecute handle lenlenth head_gradsNDArray handle for heads' gradient0 when success, -1 when failure happens ","NDArrayHandle*","head_grads","execute handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorBackwardEx","int","Excecutor run backward. ","handleexecute handle lenlenth head_gradsNDArray handle for heads' gradient is_trainint value to indicate whether the backward pass is for evaluation0 when success, -1 when failure happens ","ExecutorHandle","handle","execute handle ","","ExecutorHandle","ExecutorHandle"
"MXExecutorBackwardEx","int","Excecutor run backward. ","handleexecute handle lenlenth head_gradsNDArray handle for heads' gradient is_trainint value to indicate whether the backward pass is for evaluation0 when success, -1 when failure happens ","mx_uint","len","execute handle ","","mx_uint","mx_uint"
"MXExecutorBackwardEx","int","Excecutor run backward. ","handleexecute handle lenlenth head_gradsNDArray handle for heads' gradient is_trainint value to indicate whether the backward pass is for evaluation0 when success, -1 when failure happens ","NDArrayHandle*","head_grads","execute handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorBackwardEx","int","Excecutor run backward. ","handleexecute handle lenlenth head_gradsNDArray handle for heads' gradient is_trainint value to indicate whether the backward pass is for evaluation0 when success, -1 when failure happens ","int","is_train","execute handle ","","int","int"
"MXExecutorOutputs","int","Get executor's head NDArray. ","handleexecutor handle out_sizeoutput narray vector size outout put narray handles 0 when success, -1 when failure happens ","ExecutorHandle","handle","executor handle ","","ExecutorHandle","ExecutorHandle"
"MXExecutorOutputs","int","Get executor's head NDArray. ","handleexecutor handle out_sizeoutput narray vector size outout put narray handles 0 when success, -1 when failure happens ","mx_uint*","out_size","executor handle ","out","mx_uint","mx_uint"
"MXExecutorOutputs","int","Get executor's head NDArray. ","handleexecutor handle out_sizeoutput narray vector size outout put narray handles 0 when success, -1 when failure happens ","NDArrayHandle**","out","executor handle ","out","NDArrayHandle*","IntPtr"
"MXExecutorBind","int","Generate Executor from symbol. ","symbol_handlesymbol handle dev_typedevice type dev_iddevice id lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","SymbolHandle","symbol_handle","symbol handle ","","SymbolHandle","SymbolHandle"
"MXExecutorBind","int","Generate Executor from symbol. ","symbol_handlesymbol handle dev_typedevice type dev_iddevice id lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","int","dev_type","symbol handle ","","int","int"
"MXExecutorBind","int","Generate Executor from symbol. ","symbol_handlesymbol handle dev_typedevice type dev_iddevice id lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","int","dev_id","symbol handle ","","int","int"
"MXExecutorBind","int","Generate Executor from symbol. ","symbol_handlesymbol handle dev_typedevice type dev_iddevice id lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","mx_uint","len","symbol handle ","","mx_uint","mx_uint"
"MXExecutorBind","int","Generate Executor from symbol. ","symbol_handlesymbol handle dev_typedevice type dev_iddevice id lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","NDArrayHandle*","in_args","symbol handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorBind","int","Generate Executor from symbol. ","symbol_handlesymbol handle dev_typedevice type dev_iddevice id lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","NDArrayHandle*","arg_grad_store","symbol handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorBind","int","Generate Executor from symbol. ","symbol_handlesymbol handle dev_typedevice type dev_iddevice id lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","mx_uint*","grad_req_type","symbol handle ","","mx_uint*","IntPtr"
"MXExecutorBind","int","Generate Executor from symbol. ","symbol_handlesymbol handle dev_typedevice type dev_iddevice id lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","mx_uint","aux_states_len","symbol handle ","","mx_uint","mx_uint"
"MXExecutorBind","int","Generate Executor from symbol. ","symbol_handlesymbol handle dev_typedevice type dev_iddevice id lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","NDArrayHandle*","aux_states","symbol handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorBind","int","Generate Executor from symbol. ","symbol_handlesymbol handle dev_typedevice type dev_iddevice id lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","ExecutorHandle*","out","symbol handle ","out","ExecutorHandle","ExecutorHandle"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","SymbolHandle","symbol_handle","symbol handle ","","SymbolHandle","SymbolHandle"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","int","dev_type","symbol handle ","","int","int"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","int","dev_id","symbol handle ","","int","int"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","mx_uint","num_map_keys","symbol handle ","","mx_uint","mx_uint"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","const char**","map_keys","symbol handle ","","const char**","string[]"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","const int*","map_dev_types","symbol handle ","","const int*","int[]"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","const int*","map_dev_ids","symbol handle ","","const int*","int[]"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","mx_uint","len","symbol handle ","","mx_uint","mx_uint"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","NDArrayHandle*","in_args","symbol handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","NDArrayHandle*","arg_grad_store","symbol handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","mx_uint*","grad_req_type","symbol handle ","","mx_uint*","IntPtr"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","mx_uint","aux_states_len","symbol handle ","","mx_uint","mx_uint"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","NDArrayHandle*","aux_states","symbol handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorBindX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array outoutput executor handle 0 when success, -1 when failure happens ","ExecutorHandle*","out","symbol handle ","out","ExecutorHandle","ExecutorHandle"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","SymbolHandle","symbol_handle","symbol handle ","","SymbolHandle","SymbolHandle"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","int","dev_type","symbol handle ","","int","int"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","int","dev_id","symbol handle ","","int","int"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","mx_uint","num_map_keys","symbol handle ","","mx_uint","mx_uint"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","const char**","map_keys","symbol handle ","","const char**","string[]"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","const int*","map_dev_types","symbol handle ","","const int*","int[]"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","const int*","map_dev_ids","symbol handle ","","const int*","int[]"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","mx_uint","len","symbol handle ","","mx_uint","mx_uint"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","NDArrayHandle*","in_args","symbol handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","NDArrayHandle*","arg_grad_store","symbol handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","mx_uint*","grad_req_type","symbol handle ","","mx_uint*","IntPtr"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","mx_uint","aux_states_len","symbol handle ","","mx_uint","mx_uint"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","NDArrayHandle*","aux_states","symbol handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","ExecutorHandle","shared_exec","symbol handle ","","ExecutorHandle","ExecutorHandle"
"MXExecutorBindEX","int","Generate Executor from symbol, This is advanced function, allow specify group2ctx map. The user can annotate ""ctx_group"" attribute to name each group. ","symbol_handlesymbol handle dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map lenlength in_argsin args array arg_grad_storearg grads handle array grad_req_typegrad req array aux_states_lenlength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle 0 when success, -1 when failure happens ","ExecutorHandle*","out","symbol handle ","out","ExecutorHandle","ExecutorHandle"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","SymbolHandle","symbol_handle","symbol handle ","","SymbolHandle","SymbolHandle"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","int","dev_type","symbol handle ","","int","int"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","int","dev_id","symbol handle ","","int","int"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","num_g2c_keys","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","g2c_keys","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const int*","g2c_dev_types","symbol handle ","","const int*","int[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const int*","g2c_dev_ids","symbol handle ","","const int*","int[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","provided_grad_req_list_len","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","provided_grad_req_names","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","provided_grad_req_types","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","num_provided_arg_shapes","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","provided_arg_shape_names","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint*","provided_arg_shape_data","symbol handle ","","const mx_uint*","mx_uint[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint*","provided_arg_shape_idx","symbol handle ","","const mx_uint*","mx_uint[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","num_provided_arg_dtypes","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","provided_arg_dtype_names","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const int*","provided_arg_dtypes","symbol handle ","","const int*","int[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","num_provided_arg_stypes","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","provided_arg_stype_names","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const int*","provided_arg_stypes","symbol handle ","","const int*","int[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","num_shared_arg_names","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","shared_arg_name_list","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","int*","shared_buffer_len","symbol handle ","","int*","IntPtr"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","shared_buffer_name_list","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","NDArrayHandle*","shared_buffer_handle_list","symbol handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char***","updated_shared_buffer_name_list","symbol handle ","","const char***","IntPtr"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","NDArrayHandle**","updated_shared_buffer_handle_list","symbol handle ","","NDArrayHandle**","IntPtr"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","mx_uint*","num_in_args","symbol handle ","","mx_uint*","IntPtr"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","NDArrayHandle**","in_args","symbol handle ","","NDArrayHandle**","IntPtr"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","NDArrayHandle**","arg_grads","symbol handle ","","NDArrayHandle**","IntPtr"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","mx_uint*","num_aux_states","symbol handle ","","mx_uint*","IntPtr"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","NDArrayHandle**","aux_states","symbol handle ","","NDArrayHandle**","IntPtr"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","ExecutorHandle","shared_exec_handle","symbol handle ","","ExecutorHandle","ExecutorHandle"
"MXExecutorSimpleBind","int","DEPRECATED. Use MXExecutorSimpleBindEx instead. ","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","ExecutorHandle*","out","symbol handle ","out","ExecutorHandle","ExecutorHandle"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","SymbolHandle","symbol_handle","symbol handle ","","SymbolHandle","SymbolHandle"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","int","dev_type","symbol handle ","","int","int"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","int","dev_id","symbol handle ","","int","int"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","num_g2c_keys","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","g2c_keys","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const int*","g2c_dev_types","symbol handle ","","const int*","int[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const int*","g2c_dev_ids","symbol handle ","","const int*","int[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","provided_grad_req_list_len","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","provided_grad_req_names","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","provided_grad_req_types","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","num_provided_arg_shapes","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","provided_arg_shape_names","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const int*","provided_arg_shape_data","symbol handle ","","const int*","int[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint*","provided_arg_shape_idx","symbol handle ","","const mx_uint*","mx_uint[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","num_provided_arg_dtypes","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","provided_arg_dtype_names","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const int*","provided_arg_dtypes","symbol handle ","","const int*","int[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","num_provided_arg_stypes","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","provided_arg_stype_names","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const int*","provided_arg_stypes","symbol handle ","","const int*","int[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const mx_uint","num_shared_arg_names","symbol handle ","","const mx_uint","mx_uint"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","shared_arg_name_list","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","int*","shared_buffer_len","symbol handle ","","int*","IntPtr"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char**","shared_buffer_name_list","symbol handle ","","const char**","string[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","NDArrayHandle*","shared_buffer_handle_list","symbol handle ","","NDArrayHandle*","NDArrayHandle[]"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","const char***","updated_shared_buffer_name_list","symbol handle ","","const char***","IntPtr"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","NDArrayHandle**","updated_shared_buffer_handle_list","symbol handle ","","NDArrayHandle**","IntPtr"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","mx_uint*","num_in_args","symbol handle ","","mx_uint*","IntPtr"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","NDArrayHandle**","in_args","symbol handle ","","NDArrayHandle**","IntPtr"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","NDArrayHandle**","arg_grads","symbol handle ","","NDArrayHandle**","IntPtr"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","mx_uint*","num_aux_states","symbol handle ","","mx_uint*","IntPtr"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","NDArrayHandle**","aux_states","symbol handle ","","NDArrayHandle**","IntPtr"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","ExecutorHandle","shared_exec_handle","symbol handle ","","ExecutorHandle","ExecutorHandle"
"MXExecutorSimpleBindEx","int","","symbol_handlesymbol handle dev_typedefault device type dev_iddefault device id num_g2c_keysnumber of group2ctx keys g2c_keyskey list of group2ctx g2c_dev_typesdevice type list of group2ctx g2c_dev_idsid list of group2ctx provided_grad_req_list_lengrad_req length provided by users in front-end provided_grad_req_namesgrad_req names provided by users in front-end provided_grad_req_typesreq types provided by users in front-end num_provided_arg_shapesnumber of user provided in_arg and aux_state shapes provided_arg_shape_namesname list of provided shapes provided_arg_shape_dataprovided shape data provided_arg_shape_idxprovided shape data index num_provided_arg_dtypesnumber of user provided in_arg and axu_state dtypes provided_arg_dtype_namesargument name list of provided dtypes provided_arg_dtypesdata of provided dtypes num_provided_arg_stypesnumber of user provided in_arg and axu_state storage types provided_arg_stype_namesargument name list of provided storage types provided_arg_stypesdata of provided storage types num_shared_arg_namesnumber of parameter names passed from _bind_ith_exec shared_arg_name_listparameter name list passed from _bind_ith_exec shared_buffer_lennumber of shared data arrays passed from _bind_ith_exec shared_buffer_name_listshared data array names passed from _bind_ith_exec shared_buffer_handle_listshared data array handles passed from _bind_ith_exec updated_shared_buffer_name_listupdated shared data array names after binding updated_shared_buffer_handle_listupdated shared data arrays after binding num_in_argsnumber of input arguments of this sym in_argslist_arguments associated with the current executor arg_gradslist of gradients of in_args associated with the current executor num_aux_statesnumber of aux states of this sym aux_stateslist_auxiliary_states associated with the current executor shared_exec_handleshared excutor handle passed from _bind_ith_exec outthe handle of the executor to be created ","ExecutorHandle*","out","symbol handle ","out","ExecutorHandle","ExecutorHandle"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","int","partial_shaping","Whether to allow changing the shape of unspecified arguments. ","","int","int"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","int","allow_up_sizing","Whether to allow changing the shape of unspecified arguments. ","","int","int"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","int","dev_type","Whether to allow changing the shape of unspecified arguments. ","","int","int"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","int","dev_id","Whether to allow changing the shape of unspecified arguments. ","","int","int"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","mx_uint","num_map_keys","Whether to allow changing the shape of unspecified arguments. ","","mx_uint","mx_uint"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const char**","map_keys","Whether to allow changing the shape of unspecified arguments. ","","const char**","string[]"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const int*","map_dev_types","Whether to allow changing the shape of unspecified arguments. ","","const int*","int[]"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const int*","map_dev_ids","Whether to allow changing the shape of unspecified arguments. ","","const int*","int[]"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const mx_uint","num_provided_arg_shapes","Whether to allow changing the shape of unspecified arguments. ","","const mx_uint","mx_uint"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const char**","provided_arg_shape_names","Whether to allow changing the shape of unspecified arguments. ","","const char**","string[]"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const mx_uint*","provided_arg_shape_data","Whether to allow changing the shape of unspecified arguments. ","","const mx_uint*","mx_uint[]"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const mx_uint*","provided_arg_shape_idx","Whether to allow changing the shape of unspecified arguments. ","","const mx_uint*","mx_uint[]"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","mx_uint*","num_in_args","Whether to allow changing the shape of unspecified arguments. ","","mx_uint*","IntPtr"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","NDArrayHandle**","in_args","Whether to allow changing the shape of unspecified arguments. ","","NDArrayHandle**","IntPtr"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","NDArrayHandle**","arg_grads","Whether to allow changing the shape of unspecified arguments. ","","NDArrayHandle**","IntPtr"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","mx_uint*","num_aux_states","Whether to allow changing the shape of unspecified arguments. ","","mx_uint*","IntPtr"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","NDArrayHandle**","aux_states","Whether to allow changing the shape of unspecified arguments. ","","NDArrayHandle**","IntPtr"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","ExecutorHandle","shared_exec","Whether to allow changing the shape of unspecified arguments. ","","ExecutorHandle","ExecutorHandle"
"MXExecutorReshape","int","DEPRECATED. Use MXExecutorReshapeEx instead. Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","ExecutorHandle*","out","Whether to allow changing the shape of unspecified arguments. ","out","ExecutorHandle","ExecutorHandle"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","int","partial_shaping","Whether to allow changing the shape of unspecified arguments. ","","int","int"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","int","allow_up_sizing","Whether to allow changing the shape of unspecified arguments. ","","int","int"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","int","dev_type","Whether to allow changing the shape of unspecified arguments. ","","int","int"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","int","dev_id","Whether to allow changing the shape of unspecified arguments. ","","int","int"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","mx_uint","num_map_keys","Whether to allow changing the shape of unspecified arguments. ","","mx_uint","mx_uint"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const char**","map_keys","Whether to allow changing the shape of unspecified arguments. ","","const char**","string[]"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const int*","map_dev_types","Whether to allow changing the shape of unspecified arguments. ","","const int*","int[]"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const int*","map_dev_ids","Whether to allow changing the shape of unspecified arguments. ","","const int*","int[]"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const mx_uint","num_provided_arg_shapes","Whether to allow changing the shape of unspecified arguments. ","","const mx_uint","mx_uint"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const char**","provided_arg_shape_names","Whether to allow changing the shape of unspecified arguments. ","","const char**","string[]"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const int*","provided_arg_shape_data","Whether to allow changing the shape of unspecified arguments. ","","const int*","int[]"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","const mx_uint*","provided_arg_shape_idx","Whether to allow changing the shape of unspecified arguments. ","","const mx_uint*","mx_uint[]"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","mx_uint*","num_in_args","Whether to allow changing the shape of unspecified arguments. ","","mx_uint*","IntPtr"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","NDArrayHandle**","in_args","Whether to allow changing the shape of unspecified arguments. ","","NDArrayHandle**","IntPtr"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","NDArrayHandle**","arg_grads","Whether to allow changing the shape of unspecified arguments. ","","NDArrayHandle**","IntPtr"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","mx_uint*","num_aux_states","Whether to allow changing the shape of unspecified arguments. ","","mx_uint*","IntPtr"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","NDArrayHandle**","aux_states","Whether to allow changing the shape of unspecified arguments. ","","NDArrayHandle**","IntPtr"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","ExecutorHandle","shared_exec","Whether to allow changing the shape of unspecified arguments. ","","ExecutorHandle","ExecutorHandle"
"MXExecutorReshapeEx","int","Return a new executor with the same symbol and shared memory, but different input/output shapes. ","partial_shapingWhether to allow changing the shape of unspecified arguments. allow_up_sizingWhether to allow allocating new ndarrays that's larger than the original. dev_typedevice type of default context dev_iddevice id of default context num_map_keyssize of group2ctx map map_keyskeys of group2ctx map map_dev_typesdevice type of group2ctx map map_dev_idsdevice id of group2ctx map num_in_argslength of in_args in_argsin args array arg_gradsarg grads handle array num_aux_stateslength of auxiliary states aux_statesauxiliary states array shared_execinput executor handle for memory sharing outoutput executor handle a new executor ","ExecutorHandle*","out","Whether to allow changing the shape of unspecified arguments. ","out","ExecutorHandle","ExecutorHandle"
"MXExecutorGetOptimizedSymbol","int","get optimized graph from graph executor ","","ExecutorHandle","handle","","","ExecutorHandle","ExecutorHandle"
"MXExecutorGetOptimizedSymbol","int","get optimized graph from graph executor ","","SymbolHandle*","out","","out","SymbolHandle","SymbolHandle"
"MXExecutorSetMonitorCallback","int","set a call back to notify the completion of operation ","","ExecutorHandle","handle","","","ExecutorHandle","ExecutorHandle"
"MXExecutorSetMonitorCallback","int","set a call back to notify the completion of operation ","","ExecutorMonitorCallback","callback","","","ExecutorMonitorCallback","ExecutorMonitorCallback"
"MXExecutorSetMonitorCallback","int","set a call back to notify the completion of operation ","","void*","callback_handle","","","void*","IntPtr"
"MXExecutorSetMonitorCallbackEX","int","set a call back to notify the completion of operation ","monitor_allIf true, monitor both input and output, otherwise monitor output only. ","ExecutorHandle","handle","If true, monitor both input and output, otherwise monitor output only. ","","ExecutorHandle","ExecutorHandle"
"MXExecutorSetMonitorCallbackEX","int","set a call back to notify the completion of operation ","monitor_allIf true, monitor both input and output, otherwise monitor output only. ","ExecutorMonitorCallback","callback","","","ExecutorMonitorCallback","ExecutorMonitorCallback"
"MXExecutorSetMonitorCallbackEX","int","set a call back to notify the completion of operation ","monitor_allIf true, monitor both input and output, otherwise monitor output only. ","void*","callback_handle","","","void*","IntPtr"
"MXExecutorSetMonitorCallbackEX","int","set a call back to notify the completion of operation ","monitor_allIf true, monitor both input and output, otherwise monitor output only. ","bool","monitor_all","If true, monitor both input and output, otherwise monitor output only. ","","bool","bool"
"MXListDataIters","int","List all the available iterator entries. ","out_sizethe size of returned iterators out_arraythe output iteratos entries 0 when success, -1 when failure happens ","mx_uint*","out_size","the size of returned iterators ","out","mx_uint","mx_uint"
"MXListDataIters","int","List all the available iterator entries. ","out_sizethe size of returned iterators out_arraythe output iteratos entries 0 when success, -1 when failure happens ","DataIterCreator**","out_array","the size of returned iterators ","out","DataIterCreator*","IntPtr"
"MXDataIterCreateIter","int","Init an iterator, init with parameters the array size of passed in arguments. ","handleof the iterator creator num_paramnumber of parameter keysparameter keys valsparameter values outresulting iterator 0 when success, -1 when failure happens ","DataIterCreator","handle","of the iterator creator ","","DataIterCreator","DataIterCreator"
"MXDataIterCreateIter","int","Init an iterator, init with parameters the array size of passed in arguments. ","handleof the iterator creator num_paramnumber of parameter keysparameter keys valsparameter values outresulting iterator 0 when success, -1 when failure happens ","mx_uint","num_param","of the iterator creator ","","mx_uint","mx_uint"
"MXDataIterCreateIter","int","Init an iterator, init with parameters the array size of passed in arguments. ","handleof the iterator creator num_paramnumber of parameter keysparameter keys valsparameter values outresulting iterator 0 when success, -1 when failure happens ","const char**","keys","of the iterator creator ","","const char**","string[]"
"MXDataIterCreateIter","int","Init an iterator, init with parameters the array size of passed in arguments. ","handleof the iterator creator num_paramnumber of parameter keysparameter keys valsparameter values outresulting iterator 0 when success, -1 when failure happens ","const char**","vals","of the iterator creator ","","const char**","string[]"
"MXDataIterCreateIter","int","Init an iterator, init with parameters the array size of passed in arguments. ","handleof the iterator creator num_paramnumber of parameter keysparameter keys valsparameter values outresulting iterator 0 when success, -1 when failure happens ","DataIterHandle*","out","of the iterator creator ","out","DataIterHandle","DataIterHandle"
"MXDataIterGetIterInfo","int","Get the detailed information about data iterator. ","creatorthe DataIterCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. 0 when success, -1 when failure happens ","DataIterCreator","creator","the DataIterCreator. ","","DataIterCreator","DataIterCreator"
"MXDataIterGetIterInfo","int","Get the detailed information about data iterator. ","creatorthe DataIterCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. 0 when success, -1 when failure happens ","const char**","name","the DataIterCreator. ","out","const char*","IntPtr"
"MXDataIterGetIterInfo","int","Get the detailed information about data iterator. ","creatorthe DataIterCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. 0 when success, -1 when failure happens ","const char**","description","the DataIterCreator. ","","const char**","string[]"
"MXDataIterGetIterInfo","int","Get the detailed information about data iterator. ","creatorthe DataIterCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. 0 when success, -1 when failure happens ","mx_uint*","num_args","the DataIterCreator. ","out","mx_uint","mx_uint"
"MXDataIterGetIterInfo","int","Get the detailed information about data iterator. ","creatorthe DataIterCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. 0 when success, -1 when failure happens ","const char***","arg_names","the DataIterCreator. ","out","const char**","IntPtr"
"MXDataIterGetIterInfo","int","Get the detailed information about data iterator. ","creatorthe DataIterCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. 0 when success, -1 when failure happens ","const char***","arg_type_infos","the DataIterCreator. ","out","const char**","IntPtr"
"MXDataIterGetIterInfo","int","Get the detailed information about data iterator. ","creatorthe DataIterCreator. nameThe returned name of the creator. descriptionThe returned description of the symbol. num_argsNumber of arguments. arg_namesName of the arguments. arg_type_infosType informations about the arguments. arg_descriptionsDescription information about the arguments. 0 when success, -1 when failure happens ","const char***","arg_descriptions","the DataIterCreator. ","out","const char**","IntPtr"
"MXDataIterFree","int","Free the handle to the IO module. ","handlethe handle pointer to the data iterator 0 when success, -1 when failure happens ","DataIterHandle","handle","the handle pointer to the data iterator ","","DataIterHandle","DataIterHandle"
"MXDataIterNext","int","Move iterator to next position. ","handlethe handle to iterator outreturn value of next 0 when success, -1 when failure happens ","DataIterHandle","handle","the handle to iterator ","","DataIterHandle","DataIterHandle"
"MXDataIterNext","int","Move iterator to next position. ","handlethe handle to iterator outreturn value of next 0 when success, -1 when failure happens ","int*","out","the handle to iterator ","out","int","int"
"MXDataIterBeforeFirst","int","Call iterator.Reset. ","handlethe handle to iterator 0 when success, -1 when failure happens ","DataIterHandle","handle","the handle to iterator ","","DataIterHandle","DataIterHandle"
"MXDataIterGetData","int","Get the handle to the NDArray of underlying data. ","handlethe handle pointer to the data iterator outhandle to underlying data NDArray 0 when success, -1 when failure happens ","DataIterHandle","handle","the handle pointer to the data iterator ","","DataIterHandle","DataIterHandle"
"MXDataIterGetData","int","Get the handle to the NDArray of underlying data. ","handlethe handle pointer to the data iterator outhandle to underlying data NDArray 0 when success, -1 when failure happens ","NDArrayHandle*","out","the handle pointer to the data iterator ","out","NDArrayHandle","NDArrayHandle"
"MXDataIterGetIndex","int","Get the image index by array. ","handlethe handle pointer to the data iterator out_indexoutput index of the array. out_sizeoutput size of the array. 0 when success, -1 when failure happens ","DataIterHandle","handle","the handle pointer to the data iterator ","","DataIterHandle","DataIterHandle"
"MXDataIterGetIndex","int","Get the image index by array. ","handlethe handle pointer to the data iterator out_indexoutput index of the array. out_sizeoutput size of the array. 0 when success, -1 when failure happens ","uint64_t**","out_index","the handle pointer to the data iterator ","out","uint64_t*","IntPtr"
"MXDataIterGetIndex","int","Get the image index by array. ","handlethe handle pointer to the data iterator out_indexoutput index of the array. out_sizeoutput size of the array. 0 when success, -1 when failure happens ","uint64_t*","out_size","the handle pointer to the data iterator ","out","uint64_t","uint64_t"
"MXDataIterGetPadNum","int","Get the padding number in current data batch. ","handlethe handle pointer to the data iterator padpad number ptr 0 when success, -1 when failure happens ","DataIterHandle","handle","the handle pointer to the data iterator ","","DataIterHandle","DataIterHandle"
"MXDataIterGetPadNum","int","Get the padding number in current data batch. ","handlethe handle pointer to the data iterator padpad number ptr 0 when success, -1 when failure happens ","int*","pad","the handle pointer to the data iterator ","out","int","int"
"MXDataIterGetLabel","int","Get the handle to the NDArray of underlying label. ","handlethe handle pointer to the data iterator outthe handle to underlying label NDArray 0 when success, -1 when failure happens ","DataIterHandle","handle","the handle pointer to the data iterator ","","DataIterHandle","DataIterHandle"
"MXDataIterGetLabel","int","Get the handle to the NDArray of underlying label. ","handlethe handle pointer to the data iterator outthe handle to underlying label NDArray 0 when success, -1 when failure happens ","NDArrayHandle*","out","the handle pointer to the data iterator ","out","NDArrayHandle","NDArrayHandle"
"MXInitPSEnv","int","Initialized ps-lite environment variables. ","num_varsnumber of variables to initialize keysenvironment keys valsenvironment values ","mx_uint","num_vars","number of variables to initialize ","","mx_uint","mx_uint"
"MXInitPSEnv","int","Initialized ps-lite environment variables. ","num_varsnumber of variables to initialize keysenvironment keys valsenvironment values ","const char**","keys","number of variables to initialize ","","const char**","string[]"
"MXInitPSEnv","int","Initialized ps-lite environment variables. ","num_varsnumber of variables to initialize keysenvironment keys valsenvironment values ","const char**","vals","number of variables to initialize ","","const char**","string[]"
"MXKVStoreCreate","int","Create a kvstore. ","typethe type of KVStore outThe output type of KVStore 0 when success, -1 when failure happens ","const char*","type","the type of KVStore ","","const char*","string"
"MXKVStoreCreate","int","Create a kvstore. ","typethe type of KVStore outThe output type of KVStore 0 when success, -1 when failure happens ","KVStoreHandle*","out","the type of KVStore ","out","KVStoreHandle","KVStoreHandle"
"MXKVStoreSetGradientCompression","int","Set parameters to use low-bit compressed gradients. ","handlehandle to the kvstore keyskeys for compression parameters valsvalues for compression parameters 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreSetGradientCompression","int","Set parameters to use low-bit compressed gradients. ","handlehandle to the kvstore keyskeys for compression parameters valsvalues for compression parameters 0 when success, -1 when failure happens ","mx_uint","num_params","handle to the kvstore ","","mx_uint","mx_uint"
"MXKVStoreSetGradientCompression","int","Set parameters to use low-bit compressed gradients. ","handlehandle to the kvstore keyskeys for compression parameters valsvalues for compression parameters 0 when success, -1 when failure happens ","const char**","keys","handle to the kvstore ","","const char**","string[]"
"MXKVStoreSetGradientCompression","int","Set parameters to use low-bit compressed gradients. ","handlehandle to the kvstore keyskeys for compression parameters valsvalues for compression parameters 0 when success, -1 when failure happens ","const char**","vals","handle to the kvstore ","","const char**","string[]"
"MXKVStoreFree","int","Delete a KVStore handle. ","handlehandle to the kvstore 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreInit","int","Init a list of (key,value) pairs in kvstore. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreInit","int","Init a list of (key,value) pairs in kvstore. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values 0 when success, -1 when failure happens ","mx_uint","num","handle to the kvstore ","","mx_uint","mx_uint"
"MXKVStoreInit","int","Init a list of (key,value) pairs in kvstore. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values 0 when success, -1 when failure happens ","const int*","keys","handle to the kvstore ","","const int*","int[]"
"MXKVStoreInit","int","Init a list of (key,value) pairs in kvstore. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values 0 when success, -1 when failure happens ","NDArrayHandle*","vals","handle to the kvstore ","","NDArrayHandle*","NDArrayHandle[]"
"MXKVStoreInitEx","int","Init a list of (key,value) pairs in kvstore, where each key is a string. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreInitEx","int","Init a list of (key,value) pairs in kvstore, where each key is a string. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values 0 when success, -1 when failure happens ","mx_uint","num","handle to the kvstore ","","mx_uint","mx_uint"
"MXKVStoreInitEx","int","Init a list of (key,value) pairs in kvstore, where each key is a string. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values 0 when success, -1 when failure happens ","const char**","keys","handle to the kvstore ","","const char**","string[]"
"MXKVStoreInitEx","int","Init a list of (key,value) pairs in kvstore, where each key is a string. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values 0 when success, -1 when failure happens ","NDArrayHandle*","vals","handle to the kvstore ","","NDArrayHandle*","NDArrayHandle[]"
"MXKVStorePush","int","Push a list of (key,value) pairs to kvstore. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStorePush","int","Push a list of (key,value) pairs to kvstore. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","mx_uint","num","handle to the kvstore ","","mx_uint","mx_uint"
"MXKVStorePush","int","Push a list of (key,value) pairs to kvstore. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","const int*","keys","handle to the kvstore ","","const int*","int[]"
"MXKVStorePush","int","Push a list of (key,value) pairs to kvstore. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","NDArrayHandle*","vals","handle to the kvstore ","","NDArrayHandle*","NDArrayHandle[]"
"MXKVStorePush","int","Push a list of (key,value) pairs to kvstore. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","int","priority","handle to the kvstore ","","int","int"
"MXKVStorePushEx","int","Push a list of (key,value) pairs to kvstore, where each key is a string. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStorePushEx","int","Push a list of (key,value) pairs to kvstore, where each key is a string. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","mx_uint","num","handle to the kvstore ","","mx_uint","mx_uint"
"MXKVStorePushEx","int","Push a list of (key,value) pairs to kvstore, where each key is a string. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","const char**","keys","handle to the kvstore ","","const char**","string[]"
"MXKVStorePushEx","int","Push a list of (key,value) pairs to kvstore, where each key is a string. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","NDArrayHandle*","vals","handle to the kvstore ","","NDArrayHandle*","NDArrayHandle[]"
"MXKVStorePushEx","int","Push a list of (key,value) pairs to kvstore, where each key is a string. ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","int","priority","handle to the kvstore ","","int","int"
"MXKVStorePullWithSparse","int","pull a list of (key, value) pairs from the kvstore ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStorePullWithSparse","int","pull a list of (key, value) pairs from the kvstore ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","mx_uint","num","handle to the kvstore ","","mx_uint","mx_uint"
"MXKVStorePullWithSparse","int","pull a list of (key, value) pairs from the kvstore ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","const int*","keys","handle to the kvstore ","","const int*","int[]"
"MXKVStorePullWithSparse","int","pull a list of (key, value) pairs from the kvstore ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","NDArrayHandle*","vals","handle to the kvstore ","","NDArrayHandle*","NDArrayHandle[]"
"MXKVStorePullWithSparse","int","pull a list of (key, value) pairs from the kvstore ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","int","priority","handle to the kvstore ","","int","int"
"MXKVStorePullWithSparse","int","pull a list of (key, value) pairs from the kvstore ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","bool","ignore_sparse","handle to the kvstore ","","bool","bool"
"MXKVStorePullWithSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStorePullWithSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","mx_uint","num","handle to the kvstore ","","mx_uint","mx_uint"
"MXKVStorePullWithSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","const char**","keys","handle to the kvstore ","","const char**","string[]"
"MXKVStorePullWithSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","NDArrayHandle*","vals","handle to the kvstore ","","NDArrayHandle*","NDArrayHandle[]"
"MXKVStorePullWithSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","int","priority","handle to the kvstore ","","int","int"
"MXKVStorePullWithSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action ignore_sparsewhether to ignore sparse arrays in the request 0 when success, -1 when failure happens ","bool","ignore_sparse","handle to the kvstore ","","bool","bool"
"MXKVStorePull","int","pull a list of (key, value) pairs from the kvstore ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStorePull","int","pull a list of (key, value) pairs from the kvstore ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","mx_uint","num","handle to the kvstore ","","mx_uint","mx_uint"
"MXKVStorePull","int","pull a list of (key, value) pairs from the kvstore ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","const int*","keys","handle to the kvstore ","","const int*","int[]"
"MXKVStorePull","int","pull a list of (key, value) pairs from the kvstore ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","NDArrayHandle*","vals","handle to the kvstore ","","NDArrayHandle*","NDArrayHandle[]"
"MXKVStorePull","int","pull a list of (key, value) pairs from the kvstore ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","int","priority","handle to the kvstore ","","int","int"
"MXKVStorePullEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStorePullEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","mx_uint","num","handle to the kvstore ","","mx_uint","mx_uint"
"MXKVStorePullEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","const char**","keys","handle to the kvstore ","","const char**","string[]"
"MXKVStorePullEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","NDArrayHandle*","vals","handle to the kvstore ","","NDArrayHandle*","NDArrayHandle[]"
"MXKVStorePullEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values prioritythe priority of the action 0 when success, -1 when failure happens ","int","priority","handle to the kvstore ","","int","int"
"MXKVStorePullRowSparse","int","pull a list of (key, value) pairs from the kvstore, where each key is an integer. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStorePullRowSparse","int","pull a list of (key, value) pairs from the kvstore, where each key is an integer. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","mx_uint","num","handle to the kvstore ","","mx_uint","mx_uint"
"MXKVStorePullRowSparse","int","pull a list of (key, value) pairs from the kvstore, where each key is an integer. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","const int*","keys","handle to the kvstore ","","const int*","int[]"
"MXKVStorePullRowSparse","int","pull a list of (key, value) pairs from the kvstore, where each key is an integer. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","NDArrayHandle*","vals","handle to the kvstore ","","NDArrayHandle*","NDArrayHandle[]"
"MXKVStorePullRowSparse","int","pull a list of (key, value) pairs from the kvstore, where each key is an integer. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","const NDArrayHandle*","row_ids","handle to the kvstore ","","const NDArrayHandle*","IntPtr"
"MXKVStorePullRowSparse","int","pull a list of (key, value) pairs from the kvstore, where each key is an integer. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","int","priority","handle to the kvstore ","","int","int"
"MXKVStorePullRowSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the kvstore ","","KVStoreHandle","KVStoreHandle"
"MXKVStorePullRowSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","mx_uint","num","handle to the kvstore ","","mx_uint","mx_uint"
"MXKVStorePullRowSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","const char**","keys","handle to the kvstore ","","const char**","string[]"
"MXKVStorePullRowSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","NDArrayHandle*","vals","handle to the kvstore ","","NDArrayHandle*","NDArrayHandle[]"
"MXKVStorePullRowSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","const NDArrayHandle*","row_ids","handle to the kvstore ","","const NDArrayHandle*","IntPtr"
"MXKVStorePullRowSparseEx","int","pull a list of (key, value) pairs from the kvstore, where each key is a string. The NDArray pulled back will be in row_sparse storage with only the specified row_ids present based row_ids (others rows are zeros). ","handlehandle to the kvstore numthe number of key-value pairs keysthe list of keys valsthe list of values row_idsthe list of row_id NDArrays prioritythe priority of the action 0 when success, -1 when failure happens ","int","priority","handle to the kvstore ","","int","int"
"MXKVStoreSetUpdater","int","register a push updater ","handlehandle to the KVStore updaterudpater function updater_handleThe additional handle used to invoke the updater 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the KVStore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreSetUpdater","int","register a push updater ","handlehandle to the KVStore updaterudpater function updater_handleThe additional handle used to invoke the updater 0 when success, -1 when failure happens ","MXKVStoreUpdater","updater","handle to the KVStore ","","MXKVStoreUpdater","MXKVStoreUpdater"
"MXKVStoreSetUpdater","int","register a push updater ","handlehandle to the KVStore updaterudpater function updater_handleThe additional handle used to invoke the updater 0 when success, -1 when failure happens ","void*","updater_handle","handle to the KVStore ","","void*","IntPtr"
"MXKVStoreSetUpdaterEx","int","register a push updater with int keys and one with string keys ","handlehandle to the KVStore updaterupdater function with int keys str_updaterupdater function with string keys updater_handleThe additional handle used to invoke the updater 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the KVStore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreSetUpdaterEx","int","register a push updater with int keys and one with string keys ","handlehandle to the KVStore updaterupdater function with int keys str_updaterupdater function with string keys updater_handleThe additional handle used to invoke the updater 0 when success, -1 when failure happens ","MXKVStoreUpdater","updater","handle to the KVStore ","","MXKVStoreUpdater","MXKVStoreUpdater"
"MXKVStoreSetUpdaterEx","int","register a push updater with int keys and one with string keys ","handlehandle to the KVStore updaterupdater function with int keys str_updaterupdater function with string keys updater_handleThe additional handle used to invoke the updater 0 when success, -1 when failure happens ","MXKVStoreStrUpdater","str_updater","handle to the KVStore ","","MXKVStoreStrUpdater","MXKVStoreStrUpdater"
"MXKVStoreSetUpdaterEx","int","register a push updater with int keys and one with string keys ","handlehandle to the KVStore updaterupdater function with int keys str_updaterupdater function with string keys updater_handleThe additional handle used to invoke the updater 0 when success, -1 when failure happens ","void*","updater_handle","handle to the KVStore ","","void*","IntPtr"
"MXKVStoreGetType","int","get the type of the kvstore ","handlehandle to the KVStore typea string type 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the KVStore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreGetType","int","get the type of the kvstore ","handlehandle to the KVStore typea string type 0 when success, -1 when failure happens ","const char**","type","handle to the KVStore ","","const char**","string[]"
"MXKVStoreGetRank","int","return The rank of this node in its group, which is in [0, GroupSize). ","handlehandle to the KVStore retthe node rank 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the KVStore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreGetRank","int","return The rank of this node in its group, which is in [0, GroupSize). ","handlehandle to the KVStore retthe node rank 0 when success, -1 when failure happens ","int*","ret","handle to the KVStore ","","int*","IntPtr"
"MXKVStoreGetGroupSize","int","return The number of nodes in this group, which is ","number of workers if if IsWorkerNode() == true,number of servers if if IsServerNode() == true,1 if IsSchedulerNode() == true, handlehandle to the KVStore retthe group size 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the KVStore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreGetGroupSize","int","return The number of nodes in this group, which is ","number of workers if if IsWorkerNode() == true,number of servers if if IsServerNode() == true,1 if IsSchedulerNode() == true, handlehandle to the KVStore retthe group size 0 when success, -1 when failure happens ","int*","ret","handle to the KVStore ","","int*","IntPtr"
"MXKVStoreIsWorkerNode","int","return whether or not this process is a worker node. ","ret1 for yes, 0 for no 0 when success, -1 when failure happens ","int*","ret","1 for yes, 0 for no ","","int*","IntPtr"
"MXKVStoreIsServerNode","int","return whether or not this process is a server node. ","ret1 for yes, 0 for no 0 when success, -1 when failure happens ","int*","ret","1 for yes, 0 for no ","","int*","IntPtr"
"MXKVStoreIsSchedulerNode","int","return whether or not this process is a scheduler node. ","ret1 for yes, 0 for no 0 when success, -1 when failure happens ","int*","ret","1 for yes, 0 for no ","","int*","IntPtr"
"MXKVStoreBarrier","int","global barrier among all worker machines ","handlehandle to the KVStore 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the KVStore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreSetBarrierBeforeExit","int","whether to do barrier when finalize ","handlehandle to the KVStore barrier_before_exitwhether to do barrier when kvstore finalize 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the KVStore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreSetBarrierBeforeExit","int","whether to do barrier when finalize ","handlehandle to the KVStore barrier_before_exitwhether to do barrier when kvstore finalize 0 when success, -1 when failure happens ","const int","barrier_before_exit","handle to the KVStore ","","const int","int"
"MXKVStoreRunServer","int","Run as server (or scheduler) ","handlehandle to the KVStore controllerthe user-defined server controller controller_handlehelper handle for implementing controller 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the KVStore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreRunServer","int","Run as server (or scheduler) ","handlehandle to the KVStore controllerthe user-defined server controller controller_handlehelper handle for implementing controller 0 when success, -1 when failure happens ","MXKVStoreServerController","controller","handle to the KVStore ","","MXKVStoreServerController","MXKVStoreServerController"
"MXKVStoreRunServer","int","Run as server (or scheduler) ","handlehandle to the KVStore controllerthe user-defined server controller controller_handlehelper handle for implementing controller 0 when success, -1 when failure happens ","void*","controller_handle","handle to the KVStore ","","void*","IntPtr"
"MXKVStoreSendCommmandToServers","int","Send a command to all server nodes. ","handlehandle to the KVStore cmd_idthe head of the command cmd_bodythe body of the command 0 when success, -1 when failure happens ","KVStoreHandle","handle","handle to the KVStore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreSendCommmandToServers","int","Send a command to all server nodes. ","handlehandle to the KVStore cmd_idthe head of the command cmd_bodythe body of the command 0 when success, -1 when failure happens ","int","cmd_id","handle to the KVStore ","","int","int"
"MXKVStoreSendCommmandToServers","int","Send a command to all server nodes. ","handlehandle to the KVStore cmd_idthe head of the command cmd_bodythe body of the command 0 when success, -1 when failure happens ","const char*","cmd_body","handle to the KVStore ","","const char*","string"
"MXKVStoreGetNumDeadNode","int","Get the number of ps dead node(s) specified by {node_id}. ","handlehandle to the KVStore node_idCan be a node group or a single node. kScheduler = 1, kServerGroup = 2, kWorkerGroup = 4 numberOuptut number of dead nodes timeout_secA node fails to send heartbeart in {timeout_sec} seconds will be presumed as 'dead' ","KVStoreHandle","handle","handle to the KVStore ","","KVStoreHandle","KVStoreHandle"
"MXKVStoreGetNumDeadNode","int","Get the number of ps dead node(s) specified by {node_id}. ","handlehandle to the KVStore node_idCan be a node group or a single node. kScheduler = 1, kServerGroup = 2, kWorkerGroup = 4 numberOuptut number of dead nodes timeout_secA node fails to send heartbeart in {timeout_sec} seconds will be presumed as 'dead' ","const int","node_id","handle to the KVStore ","","const int","int"
"MXKVStoreGetNumDeadNode","int","Get the number of ps dead node(s) specified by {node_id}. ","handlehandle to the KVStore node_idCan be a node group or a single node. kScheduler = 1, kServerGroup = 2, kWorkerGroup = 4 numberOuptut number of dead nodes timeout_secA node fails to send heartbeart in {timeout_sec} seconds will be presumed as 'dead' ","int*","number","handle to the KVStore ","","int*","IntPtr"
"MXKVStoreGetNumDeadNode","int","Get the number of ps dead node(s) specified by {node_id}. ","handlehandle to the KVStore node_idCan be a node group or a single node. kScheduler = 1, kServerGroup = 2, kWorkerGroup = 4 numberOuptut number of dead nodes timeout_secA node fails to send heartbeart in {timeout_sec} seconds will be presumed as 'dead' ","const int","timeout_sec","handle to the KVStore ","","const int","int"
"MXRecordIOWriterCreate","int","Create a RecordIO writer object. ","uripath to file outhandle pointer to the created object 0 when success, -1 when failure happens ","const char*","uri","path to file ","","const char*","string"
"MXRecordIOWriterCreate","int","Create a RecordIO writer object. ","uripath to file outhandle pointer to the created object 0 when success, -1 when failure happens ","RecordIOHandle*","out","path to file ","out","RecordIOHandle","RecordIOHandle"
"MXRecordIOWriterFree","int","Delete a RecordIO writer object. ","handlehandle to RecordIO object 0 when success, -1 when failure happens ","RecordIOHandle","handle","handle to RecordIO object ","","RecordIOHandle","RecordIOHandle"
"MXRecordIOWriterWriteRecord","int","Write a record to a RecordIO object. ","handlehandle to RecordIO object bufbuffer to write sizesize of buffer 0 when success, -1 when failure happens ","RecordIOHandle","handle","handle to RecordIO object ","","RecordIOHandle","RecordIOHandle"
"MXRecordIOWriterWriteRecord","int","Write a record to a RecordIO object. ","handlehandle to RecordIO object bufbuffer to write sizesize of buffer 0 when success, -1 when failure happens ","const char*","buf","handle to RecordIO object ","","const char*","string"
"MXRecordIOWriterWriteRecord","int","Write a record to a RecordIO object. ","handlehandle to RecordIO object bufbuffer to write sizesize of buffer 0 when success, -1 when failure happens ","size_t","size","handle to RecordIO object ","","size_t","size_t"
"MXRecordIOWriterTell","int","Get the current writer pointer position. ","handlehandle to RecordIO object poshandle to output position 0 when success, -1 when failure happens ","RecordIOHandle","handle","handle to RecordIO object ","","RecordIOHandle","RecordIOHandle"
"MXRecordIOWriterTell","int","Get the current writer pointer position. ","handlehandle to RecordIO object poshandle to output position 0 when success, -1 when failure happens ","size_t*","pos","handle to RecordIO object ","","size_t*","IntPtr"
"MXRecordIOReaderCreate","int","Create a RecordIO reader object. ","uripath to file outhandle pointer to the created object 0 when success, -1 when failure happens ","const char*","uri","path to file ","","const char*","string"
"MXRecordIOReaderCreate","int","Create a RecordIO reader object. ","uripath to file outhandle pointer to the created object 0 when success, -1 when failure happens ","RecordIOHandle*","out","path to file ","out","RecordIOHandle","RecordIOHandle"
"MXRecordIOReaderFree","int","Delete a RecordIO reader object. ","handlehandle to RecordIO object 0 when success, -1 when failure happens ","RecordIOHandle","handle","handle to RecordIO object ","","RecordIOHandle","RecordIOHandle"
"MXRecordIOReaderReadRecord","int","Write a record to a RecordIO object. ","handlehandle to RecordIO object bufpointer to return buffer sizepoint to size of buffer 0 when success, -1 when failure happens ","RecordIOHandle","handle","handle to RecordIO object ","","RecordIOHandle","RecordIOHandle"
"MXRecordIOReaderReadRecord","int","Write a record to a RecordIO object. ","handlehandle to RecordIO object bufpointer to return buffer sizepoint to size of buffer 0 when success, -1 when failure happens ","char const**","buf","handle to RecordIO object ","","char const**","IntPtr"
"MXRecordIOReaderReadRecord","int","Write a record to a RecordIO object. ","handlehandle to RecordIO object bufpointer to return buffer sizepoint to size of buffer 0 when success, -1 when failure happens ","size_t*","size","handle to RecordIO object ","","size_t*","IntPtr"
"MXRecordIOReaderSeek","int","Set the current reader pointer position. ","handlehandle to RecordIO object postarget position 0 when success, -1 when failure happens ","RecordIOHandle","handle","handle to RecordIO object ","","RecordIOHandle","RecordIOHandle"
"MXRecordIOReaderSeek","int","Set the current reader pointer position. ","handlehandle to RecordIO object postarget position 0 when success, -1 when failure happens ","size_t","pos","handle to RecordIO object ","","size_t","size_t"
"MXRecordIOReaderTell","int","Get the current writer pointer position. ","handlehandle to RecordIO object poshandle to output position 0 when success, -1 when failure happens ","RecordIOHandle","handle","handle to RecordIO object ","","RecordIOHandle","RecordIOHandle"
"MXRecordIOReaderTell","int","Get the current writer pointer position. ","handlehandle to RecordIO object poshandle to output position 0 when success, -1 when failure happens ","size_t*","pos","handle to RecordIO object ","","size_t*","IntPtr"
"MXRtcCreate","int","Create a MXRtc object. ","","char*","name","","","char*","string"
"MXRtcCreate","int","Create a MXRtc object. ","","mx_uint","num_input","","","mx_uint","mx_uint"
"MXRtcCreate","int","Create a MXRtc object. ","","mx_uint","num_output","","","mx_uint","mx_uint"
"MXRtcCreate","int","Create a MXRtc object. ","","char**","input_names","","","char**","string[]"
"MXRtcCreate","int","Create a MXRtc object. ","","char**","output_names","","","char**","string[]"
"MXRtcCreate","int","Create a MXRtc object. ","","NDArrayHandle*","inputs","","","NDArrayHandle*","NDArrayHandle[]"
"MXRtcCreate","int","Create a MXRtc object. ","","NDArrayHandle*","outputs","","","NDArrayHandle*","NDArrayHandle[]"
"MXRtcCreate","int","Create a MXRtc object. ","","char*","kernel","","","char*","string"
"MXRtcCreate","int","Create a MXRtc object. ","","RtcHandle*","out","","out","RtcHandle","RtcHandle"
"MXRtcPush","int","Run cuda kernel. ","","RtcHandle","handle","","","RtcHandle","RtcHandle"
"MXRtcPush","int","Run cuda kernel. ","","mx_uint","num_input","","","mx_uint","mx_uint"
"MXRtcPush","int","Run cuda kernel. ","","mx_uint","num_output","","","mx_uint","mx_uint"
"MXRtcPush","int","Run cuda kernel. ","","NDArrayHandle*","inputs","","","NDArrayHandle*","NDArrayHandle[]"
"MXRtcPush","int","Run cuda kernel. ","","NDArrayHandle*","outputs","","","NDArrayHandle*","NDArrayHandle[]"
"MXRtcPush","int","Run cuda kernel. ","","mx_uint","gridDimX","","","mx_uint","mx_uint"
"MXRtcPush","int","Run cuda kernel. ","","mx_uint","gridDimY","","","mx_uint","mx_uint"
"MXRtcPush","int","Run cuda kernel. ","","mx_uint","gridDimZ","","","mx_uint","mx_uint"
"MXRtcPush","int","Run cuda kernel. ","","mx_uint","blockDimX","","","mx_uint","mx_uint"
"MXRtcPush","int","Run cuda kernel. ","","mx_uint","blockDimY","","","mx_uint","mx_uint"
"MXRtcPush","int","Run cuda kernel. ","","mx_uint","blockDimZ","","","mx_uint","mx_uint"
"MXRtcFree","int","Delete a MXRtc object. ","","RtcHandle","handle","","","RtcHandle","RtcHandle"
"MXCustomOpRegister","int","","","const char*","op_type","","","const char*","string"
"MXCustomOpRegister","int","","","CustomOpPropCreator","creator","","","CustomOpPropCreator","CustomOpPropCreator"
"MXCustomFunctionRecord","int","","","int","num_inputs","","","int","int"
"MXCustomFunctionRecord","int","","","NDArrayHandle*","inputs","","","NDArrayHandle*","NDArrayHandle[]"
"MXCustomFunctionRecord","int","","","int","num_outputs","","","int","int"
"MXCustomFunctionRecord","int","","","NDArrayHandle*","outputs","","","NDArrayHandle*","NDArrayHandle[]"
"MXCustomFunctionRecord","int","","","struct MXCallbackList*","callbacks","","","struct MXCallbackList*","IntPtr"
"MXRtcCudaModuleCreate","int","","","const char*","source","","","const char*","string"
"MXRtcCudaModuleCreate","int","","","int","num_options","","","int","int"
"MXRtcCudaModuleCreate","int","","","const char**","options","","","const char**","string[]"
"MXRtcCudaModuleCreate","int","","","int","num_exports","","","int","int"
"MXRtcCudaModuleCreate","int","","","const char**","exports","","","const char**","string[]"
"MXRtcCudaModuleCreate","int","","","CudaModuleHandle*","out","","out","CudaModuleHandle","CudaModuleHandle"
"MXRtcCudaModuleFree","int","","","CudaModuleHandle","handle","","","CudaModuleHandle","CudaModuleHandle"
"MXRtcCudaKernelCreate","int","","","CudaModuleHandle","handle","","","CudaModuleHandle","CudaModuleHandle"
"MXRtcCudaKernelCreate","int","","","const char*","name","","","const char*","string"
"MXRtcCudaKernelCreate","int","","","int","num_args","","","int","int"
"MXRtcCudaKernelCreate","int","","","int*","is_ndarray","","","int*","IntPtr"
"MXRtcCudaKernelCreate","int","","","int*","is_const","","","int*","IntPtr"
"MXRtcCudaKernelCreate","int","","","int*","arg_types","","","int*","IntPtr"
"MXRtcCudaKernelCreate","int","","","CudaKernelHandle*","out","","out","CudaKernelHandle","CudaKernelHandle"
"MXRtcCudaKernelFree","int","","","CudaKernelHandle","handle","","","CudaKernelHandle","CudaKernelHandle"
"MXRtcCudaKernelCall","int","","","CudaKernelHandle","handle","","","CudaKernelHandle","CudaKernelHandle"
"MXRtcCudaKernelCall","int","","","int","dev_id","","","int","int"
"MXRtcCudaKernelCall","int","","","void**","args","","","void**","IntPtr"
"MXRtcCudaKernelCall","int","","","mx_uint","grid_dim_x","","","mx_uint","mx_uint"
"MXRtcCudaKernelCall","int","","","mx_uint","grid_dim_y","","","mx_uint","mx_uint"
"MXRtcCudaKernelCall","int","","","mx_uint","grid_dim_z","","","mx_uint","mx_uint"
"MXRtcCudaKernelCall","int","","","mx_uint","block_dim_x","","","mx_uint","mx_uint"
"MXRtcCudaKernelCall","int","","","mx_uint","block_dim_y","","","mx_uint","mx_uint"
"MXRtcCudaKernelCall","int","","","mx_uint","block_dim_z","","","mx_uint","mx_uint"
"MXRtcCudaKernelCall","int","","","mx_uint","shared_mem","","","mx_uint","mx_uint"
"MXNDArrayGetSharedMemHandle","int","Get shared memory handle from NDArray. ","handleNDArray handle. shared_pidoutput PID shared_idoutput shared memory id. ","NDArrayHandle","handle","NDArray handle. ","","NDArrayHandle","NDArrayHandle"
"MXNDArrayGetSharedMemHandle","int","Get shared memory handle from NDArray. ","handleNDArray handle. shared_pidoutput PID shared_idoutput shared memory id. ","int*","shared_pid","NDArray handle. ","","int*","IntPtr"
"MXNDArrayGetSharedMemHandle","int","Get shared memory handle from NDArray. ","handleNDArray handle. shared_pidoutput PID shared_idoutput shared memory id. ","int*","shared_id","NDArray handle. ","","int*","IntPtr"
"MXNDArrayCreateFromSharedMem","int","DEPRECATED. Use MXNDArrayCreateFromSharedMemEx instead. Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","int","shared_pid","shared PID ","","int","int"
"MXNDArrayCreateFromSharedMem","int","DEPRECATED. Use MXNDArrayCreateFromSharedMemEx instead. Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","int","shared_id","shared PID ","","int","int"
"MXNDArrayCreateFromSharedMem","int","DEPRECATED. Use MXNDArrayCreateFromSharedMemEx instead. Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","const mx_uint*","shape","shared PID ","","const mx_uint*","mx_uint[]"
"MXNDArrayCreateFromSharedMem","int","DEPRECATED. Use MXNDArrayCreateFromSharedMemEx instead. Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","mx_uint","ndim","shared PID ","","mx_uint","mx_uint"
"MXNDArrayCreateFromSharedMem","int","DEPRECATED. Use MXNDArrayCreateFromSharedMemEx instead. Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","int","dtype","shared PID ","","int","int"
"MXNDArrayCreateFromSharedMem","int","DEPRECATED. Use MXNDArrayCreateFromSharedMemEx instead. Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","NDArrayHandle*","out","shared PID ","out","NDArrayHandle","NDArrayHandle"
"MXStorageEmptyCache","int","Release all unreferenced memory from the devices storage managers memory pool. ","dev_typedevice type, specify device we want to take dev_idthe device id of the specific device ","int","dev_type","device type, specify device we want to take ","","int","int"
"MXStorageEmptyCache","int","Release all unreferenced memory from the devices storage managers memory pool. ","dev_typedevice type, specify device we want to take dev_idthe device id of the specific device ","int","dev_id","device type, specify device we want to take ","","int","int"
"MXNDArrayCreateFromSharedMemEx","int","Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","int","shared_pid","shared PID ","","int","int"
"MXNDArrayCreateFromSharedMemEx","int","Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","int","shared_id","shared PID ","","int","int"
"MXNDArrayCreateFromSharedMemEx","int","Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","const int*","shape","shared PID ","","const int*","int[]"
"MXNDArrayCreateFromSharedMemEx","int","Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","int","ndim","shared PID ","","int","int"
"MXNDArrayCreateFromSharedMemEx","int","Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","int","dtype","shared PID ","","int","int"
"MXNDArrayCreateFromSharedMemEx","int","Reconstruct NDArray from shared memory handle. ","shared_pidshared PID shared_idshared memory id shapepointer to NDArray dimensions ndimnumber of NDArray dimensions dtypedata type of NDArray outconstructed NDArray ","NDArrayHandle*","out","shared PID ","out","NDArrayHandle","NDArrayHandle"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","EngineAsyncFunc","async_func","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","EngineAsyncFunc","EngineAsyncFunc"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","void*","func_param","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","void*","IntPtr"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","EngineFuncParamDeleter","deleter","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","EngineFuncParamDeleter","EngineFuncParamDeleter"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","ContextHandle","ctx_handle","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","ContextHandle","ContextHandle"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","EngineVarHandle","const_vars_handle","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","EngineVarHandle","EngineVarHandle"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","int","num_const_vars","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","int","int"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","EngineVarHandle","mutable_vars_handle","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","EngineVarHandle","EngineVarHandle"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","int","num_mutable_vars","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","int","int"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","EngineFnPropertyHandle","prop_handle","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","EngineFnPropertyHandle","EngineFnPropertyHandle"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","int","priority","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","int","int"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","const char*","opr_name","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","const char*","string"
"MXEnginePushAsync","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","bool","wait","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","bool","bool"
"MXEnginePushSync","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","EngineSyncFunc","sync_func","Execution function that executes the operation. ","","EngineSyncFunc","EngineSyncFunc"
"MXEnginePushSync","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","void*","func_param","Execution function that executes the operation. ","","void*","IntPtr"
"MXEnginePushSync","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","EngineFuncParamDeleter","deleter","Execution function that executes the operation. ","","EngineFuncParamDeleter","EngineFuncParamDeleter"
"MXEnginePushSync","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","ContextHandle","ctx_handle","Execution function that executes the operation. ","","ContextHandle","ContextHandle"
"MXEnginePushSync","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","EngineVarHandle","const_vars_handle","Execution function that executes the operation. ","","EngineVarHandle","EngineVarHandle"
"MXEnginePushSync","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","int","num_const_vars","Execution function that executes the operation. ","","int","int"
"MXEnginePushSync","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","EngineVarHandle","mutable_vars_handle","Execution function that executes the operation. ","","EngineVarHandle","EngineVarHandle"
"MXEnginePushSync","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","int","num_mutable_vars","Execution function that executes the operation. ","","int","int"
"MXEnginePushSync","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","EngineFnPropertyHandle","prop_handle","Execution function that executes the operation. ","","EngineFnPropertyHandle","EngineFnPropertyHandle"
"MXEnginePushSync","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","int","priority","Execution function that executes the operation. ","","int","int"
"MXEnginePushSync","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_vars_handleThe variables that current operation will use but not mutate. num_const_varsThe number of const_vars_handle. mutable_vars_handleThe variables that current operation will mutate. num_mutable_varsThe number of mutable_vars_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","const char*","opr_name","Execution function that executes the operation. ","","const char*","string"
"MXShallowCopyNDArray","int","Create an NDArray from source sharing the same data chunk. ","srcsource NDArray outnew NDArray sharing the same data chunck with src ","NDArrayHandle","src","source NDArray ","","NDArrayHandle","NDArrayHandle"
"MXShallowCopyNDArray","int","Create an NDArray from source sharing the same data chunk. ","srcsource NDArray outnew NDArray sharing the same data chunck with src ","NDArrayHandle*","out","source NDArray ","out","NDArrayHandle","NDArrayHandle"
"MXShallowCopySymbol","int","Create an Symbol from source sharing the same graph structure. ","srcsource Symbol outnew Symbol sharing the same graph structure with src ","SymbolHandle","src","source Symbol ","","SymbolHandle","SymbolHandle"
"MXShallowCopySymbol","int","Create an Symbol from source sharing the same graph structure. ","srcsource Symbol outnew Symbol sharing the same graph structure with src ","SymbolHandle*","out","source Symbol ","out","SymbolHandle","SymbolHandle"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","EngineAsyncFunc","async_func","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","EngineAsyncFunc","EngineAsyncFunc"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","void*","func_param","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","void*","IntPtr"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","EngineFuncParamDeleter","deleter","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","EngineFuncParamDeleter","EngineFuncParamDeleter"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","ContextHandle","ctx_handle","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","ContextHandle","ContextHandle"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","NDArrayHandle*","const_nds_handle","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","NDArrayHandle*","NDArrayHandle[]"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","int","num_const_nds","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","int","int"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","NDArrayHandle*","mutable_nds_handle","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","NDArrayHandle*","NDArrayHandle[]"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","int","num_mutable_nds","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","int","int"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","EngineFnPropertyHandle","prop_handle","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","EngineFnPropertyHandle","EngineFnPropertyHandle"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","int","priority","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","int","int"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","const char*","opr_name","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","const char*","string"
"MXEnginePushAsyncND","int","Push an asynchronous operation to the engine. ","async_funcExecution function whici takes a parameter on_complete that must be called when the execution ompletes. func_paramThe parameter set on calling async_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. waitWhether this is a WaitForVar operation. ","bool","wait","Execution function whici takes a parameter on_complete that must be called when the execution ompletes. ","","bool","bool"
"MXEnginePushSyncND","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","EngineSyncFunc","sync_func","Execution function that executes the operation. ","","EngineSyncFunc","EngineSyncFunc"
"MXEnginePushSyncND","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","void*","func_param","Execution function that executes the operation. ","","void*","IntPtr"
"MXEnginePushSyncND","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","EngineFuncParamDeleter","deleter","Execution function that executes the operation. ","","EngineFuncParamDeleter","EngineFuncParamDeleter"
"MXEnginePushSyncND","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","ContextHandle","ctx_handle","Execution function that executes the operation. ","","ContextHandle","ContextHandle"
"MXEnginePushSyncND","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","NDArrayHandle*","const_nds_handle","Execution function that executes the operation. ","","NDArrayHandle*","NDArrayHandle[]"
"MXEnginePushSyncND","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","int","num_const_nds","Execution function that executes the operation. ","","int","int"
"MXEnginePushSyncND","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","NDArrayHandle*","mutable_nds_handle","Execution function that executes the operation. ","","NDArrayHandle*","NDArrayHandle[]"
"MXEnginePushSyncND","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","int","num_mutable_nds","Execution function that executes the operation. ","","int","int"
"MXEnginePushSyncND","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","EngineFnPropertyHandle","prop_handle","Execution function that executes the operation. ","","EngineFnPropertyHandle","EngineFnPropertyHandle"
"MXEnginePushSyncND","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","int","priority","Execution function that executes the operation. ","","int","int"
"MXEnginePushSyncND","int","Push a synchronous operation to the engine. ","sync_funcExecution function that executes the operation. func_paramThe parameter set on calling sync_func, can be NULL. deleterThe callback to free func_param, can be NULL. ctx_handleExecution context. const_nds_handleThe NDArrays that current operation will use but not mutate. num_const_ndsThe number of const_nds_handle. mutable_nds_handleThe NDArrays that current operation will mutate. num_mutable_ndsThe number of mutable_nds_handle. prop_handleProperty of the function. priorityPriority of the action, as hint to the engine. opr_nameThe operation name. ","const char*","opr_name","Execution function that executes the operation. ","","const char*","string"
