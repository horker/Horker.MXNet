<#@ template debug="true" language="C#" hostspecific="true" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Threading" #>
<#@ output extension=".cs" #>
<#
var numericTypes = new [] {
	"double",
	"float",
	"long",
	"int",
	"short",
	"byte",
	"sbyte",
	"decimal"
};

var structTypes = new[] {
	"bool",
	"DateTime",
	"DateTimeOffset",
	"string"
};

var doc = GetDocument("MetaNumIListExtensions.cs");
TextInfo textInfo = Thread.CurrentThread.CurrentCulture.TextInfo;
#>
using System;
using System.Collections.Generic;
using System.Linq;

namespace Horker.Numerics.DataMaps.Extensions
{
	public static partial class GenericIListExtensions
	{
<#
foreach (var t in numericTypes)
{
	string capitalized = textInfo.ToTitleCase(t);
	if (t == "sbyte")
		capitalized = "SByte";
	else
		capitalized = textInfo.ToTitleCase(t);

	var text = doc.Replace("MetaNum", t);
	text = text.Replace("MetaFloat", t == "float" ? "float" : "double");
#>
<#= text #>
<#
}
#>
<#
doc = GetDocument("MetaStructIListExtensions.cs");
foreach (var t in structTypes)
{
	string capitalized = textInfo.ToTitleCase(t);
	var text = doc.Replace("MetaStruct", t);
#>
<#= text #>
<#
}
#>
    }
}
<#+
private string GetDocument(string baseFile)
{
	var templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
	var baseFilePath = Path.Combine(templateDirectory, baseFile);

	var  document = File.ReadAllText(baseFilePath);

	var start = document.IndexOf("CUT ABOVE") + "CUT ABOVE".Length;
	var end = document.IndexOf("// CUT BELOW") - "// CUT BELOW".Length;

	var doc = document.Substring(start, end - start);

	return doc;
}
#>
