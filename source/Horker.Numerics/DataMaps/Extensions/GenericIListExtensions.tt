<#@ template debug="true" language="C#" hostspecific="true" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Threading" #>
<#@ output extension=".cs" #>
<#
var numericTypes = new[] {
	"double",
	"float",
	"long",
	"int",
	"short",
	"byte",
	"sbyte",
	"decimal"
};

var dateTimeTypes = new[] {
	"DateTime",
	"DateTimeOffset"
};

var unaryOperators = new[] {
	Tuple.Create("Abs", "MetaNum", "", "(MetaNum)Math.Abs((double)self[i])"),
	Tuple.Create("Acos", "MetaNum", "", "(MetaNum)Math.Acos((double)self[i])"),
	Tuple.Create("Asin", "MetaNum", "", "(MetaNum)Math.Asin((double)self[i])"),
	Tuple.Create("Atan", "MetaNum", "", "(MetaNum)Math.Atan((double)self[i])"),
	Tuple.Create("Atan2", "MetaNum", ", double x", "(MetaNum)Math.Atan2((double)self[i], x)"),
	Tuple.Create("Ceiling", "MetaFloat", "", "(MetaFloat)Math.Ceiling((double)self[i])"),
	Tuple.Create("Cos", "MetaFloat", "", "(MetaFloat)Math.Cos((double)self[i])"),
	Tuple.Create("Exp", "MetaFloat", "", "(MetaFloat)Math.Exp((double)self[i])"),
	Tuple.Create("Floor", "MetaFloat", "", "(MetaFloat)Math.Floor((double)self[i])"),
	Tuple.Create("Log", "MetaFloat", "", "(MetaFloat)Math.Log((double)self[i])"),
	Tuple.Create("Log10", "MetaFloat", "", "(MetaFloat)Math.Log10((double)self[i])"),
	Tuple.Create("Negate", "MetaNum", "", "(MetaNum)-self[i]"),
	Tuple.Create("Pow", "MetaFloat", ", double exp", "(MetaFloat)Math.Pow((double)self[i], exp)"),
	Tuple.Create("Round", "MetaFloat", ", int digits = 0, MidpointRounding mode = MidpointRounding.ToEven", "(MetaFloat)Math.Round((double)self[i], digits, mode)"),
	Tuple.Create("Sign", "MetaFloat", "", "(MetaFloat)Math.Sign((double)self[i])"),
	Tuple.Create("Sin", "MetaFloat", "", "(MetaFloat)Math.Sin((double)self[i])"),
	Tuple.Create("Sinh", "MetaFloat", "", "(MetaFloat)Math.Sinh((double)self[i])"),
	Tuple.Create("Sqrt", "MetaFloat", "", "(MetaFloat)Math.Sqrt((double)self[i])"),
	Tuple.Create("Tan", "MetaFloat", "", "(MetaFloat)Math.Tan((double)self[i])"),
	Tuple.Create("Tanh", "MetaFloat", "", "(MetaFloat)Math.Tanh((double)self[i])"),
	Tuple.Create("Truncate", "MetaFloat", "", "(MetaFloat)Math.Truncate((double)self[i])"),
};

var binaryOperators = new[] {
	Tuple.Create("ElementAdd", "(MetaNum)(self[i] + other[i])", "(MetaNum)(self[i] + value)"),
	Tuple.Create("ElementSubtract", "(MetaNum)(self[i] - other[i])", "(MetaNum)(self[i] - value)"),
	Tuple.Create("ElementMultiply", "(MetaNum)(self[i] * other[i])", "(MetaNum)(self[i] * value)"),
	Tuple.Create("ElementDivide", "(MetaNum)(self[i] / other[i])", "(MetaNum)(self[i] / value)"),
	Tuple.Create("ElementMod", "(MetaNum)(self[i] % other[i])", "(MetaNum)(self[i] % value)"),
	Tuple.Create("ElementAddR", "(MetaNum)(other[i] + self[i])", "(MetaNum)(value - self[i])"),
	Tuple.Create("ElementSubtractR", "(MetaNum)(other[i] - self[i])", "(MetaNum)(value - self[i])"),
	Tuple.Create("ElementMultiplyR", "(MetaNum)(other[i] * self[i])", "(MetaNum)(value * self[i])"),
	Tuple.Create("ElementDivideR", "(MetaNum)(other[i] / self[i])", "(MetaNum)(value / self[i])"),
	Tuple.Create("ElementModR", "(MetaNum)(other[i] % self[i])", "(MetaNum)(value % self[i])")
};

var dateTimeOperators = new[] {
	Tuple.Create("Year", "int", "self[i].Year"),
	Tuple.Create("Month", "int", "self[i].Month"),
	Tuple.Create("Day", "int", "self[i].Day"),
	Tuple.Create("Days", "int", "DateTimeUtils.GetDaysPassed(self[i])"),
	Tuple.Create("DaysInRadian", "double", "DateTimeUtils.GetDaysInRadian(self[i])")
};

TextInfo textInfo = Thread.CurrentThread.CurrentCulture.TextInfo;
string text;
#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Horker.Numerics.DataMaps.Utilities;
using Horker.Numerics.Utilities;

namespace Horker.Numerics.DataMaps.Extensions
{
	public static partial class GenericIListExtensions
	{
<#
var doc = GetDocument("MetaNumIListExtensions.cs");
foreach (var t in numericTypes)
{
	string capitalized = textInfo.ToTitleCase(t);
	if (t == "sbyte")
		capitalized = "SByte";
	else
		capitalized = textInfo.ToTitleCase(t);

	text = doc.Replace("MetaNum", t);
	text = text.Replace("MetaFloat", t == "float" ? "float" : "double");
#>
<#= text #>
<#
}
#>
<#
doc = GetDocument("MetaNumElementwiseUnary.cs");
foreach (var t in numericTypes)
{
    foreach (var op in unaryOperators)
	{
		var arguments = "(this IList<MetaNum> self" + op.Item3 + ")";
		text = doc.Replace("Negate(this IList<MetaNum> self)", op.Item1 + arguments);
		text = text.Replace("NegateFill(this IList<MetaNum> self)", op.Item1 + "Fill" + arguments);
		text = text.Replace("ReturnType", op.Item2);
		text = text.Replace("-self[i]", op.Item4);
        text = text.Replace("MetaNum", t);
		text = text.Replace("MetaFloat", t == "float" ? "float" : "double");
#>
<#= text #>
<#
	}
}

doc = GetDocument("MetaNumElementwiseBinary.cs");
foreach (var t in numericTypes)
{
    foreach (var op in binaryOperators)
	{
		text = doc.Replace("ElementAdd", op.Item1);
		text = text.Replace("self[i] + other[i]", op.Item2);
		text = text.Replace("self[i] + value", op.Item3);
        text = text.Replace("MetaNum", t);
		text = text.Replace("MetaFloat", t == "float" ? "float" : "double");
#>
<#= text #>
<#
	}
}

doc = GetDocument("DateTimeIListExtensions.cs");
foreach (var t in dateTimeTypes)
{
    foreach (var op in dateTimeOperators)
	{
		var arguments = "(this IList<DateTime> self)";
		text = doc.Replace("Year(this IList<DateTime> self)", op.Item1 + arguments);
		text = text.Replace("int", op.Item2);
		text = text.Replace("self[i].Year", op.Item3);
        text = text.Replace("<DateTime>", $"<{t}>");
#>
<#= text #>
<#
	}
}
#>
	}
}
<#+
private string GetDocument(string baseFile)
{
	var templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
	var baseFilePath = Path.Combine(templateDirectory, baseFile);

	var  document = File.ReadAllText(baseFilePath);

	var start = document.IndexOf("CUT ABOVE") + "CUT ABOVE".Length;
	var end = document.IndexOf("// CUT BELOW") - "// CUT BELOW".Length;

	var doc = document.Substring(start, end - start);

	return doc;
}
#>
