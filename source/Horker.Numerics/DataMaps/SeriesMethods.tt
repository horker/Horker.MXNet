<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#   
var methodNames = new []
{
	Tuple.Create("CumulativeMax", "", ""),
	Tuple.Create("CumulativeMin", "", ""),
	Tuple.Create("CumulativeProduct", "", ""),
	Tuple.Create("CumulativeSum", "", ""),
	Tuple.Create("ElementAdd", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementAdd", "object other", ", (dynamic)other"),
	Tuple.Create("ElementSubtract", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementSubtract", "object other", ", (dynamic)other"),
	Tuple.Create("ElementMultiply", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementMultiply", "object other", ", (dynamic)other"),
	Tuple.Create("ElementDivide", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementDivide", "object other", ", (dynamic)other"),
	Tuple.Create("FillNaN", "object fillValue", ", (dynamic)fillValue"),
	Tuple.Create("GetUnique", "", ""),
	Tuple.Create("RemoveNaN", "", ""),
};

var nonSeriesMethods = new[]
{
	Tuple.Create("Correlation", "object", "SeriesBase other, bool skipNaN = true", ", (dynamic)other.UnderlyingList, skipNaN"),
	Tuple.Create("Cor", "object", "SeriesBase other, bool skipNaN = true", ", (dynamic)other.UnderlyingList, skipNaN"),
	Tuple.Create("Covariance", "object", "SeriesBase other, bool unbiased = true, bool skipNaN = true", ", (dynamic)other.UnderlyingList, unbiased, skipNaN"),
	Tuple.Create("Cov", "object", "SeriesBase other, bool unbiased = true, bool skipNaN = true", ", (dynamic)other.UnderlyingList, unbiased, skipNaN"),
	Tuple.Create("CumulativeMaxFill", "void", "", ""),
	Tuple.Create("CumulativeMinFill", "void", "", ""),
	Tuple.Create("CumulativeProductFill", "void", "", ""),
	Tuple.Create("CumulativeSumFill", "void", "", ""),
	Tuple.Create("CountNaN", "int", "", ""),
	Tuple.Create("CountUnique", "int", "", ""),
	Tuple.Create("Describe", "Summary", "", ""),
	Tuple.Create("ElementAddFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementAddFill", "void", "object other", ", (dynamic)other"),
	Tuple.Create("ElementSubtractFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementSubtractFill", "void", "object other", ", (dynamic)other"),
	Tuple.Create("ElementMultiplyFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementMultiplyFill", "void", "object other", ", (dynamic)other"),
	Tuple.Create("ElementDivideFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementDivideFill", "void", "object other", ", (dynamic)other"),
	Tuple.Create("FillNaNFill", "void", "object fillValue", ", (dynamic)fillValue"),
	Tuple.Create("Kurtosis", "object","bool unbiased = true", ", unbiased"),
    Tuple.Create("Max", "object", "", ""),
    Tuple.Create("Min", "object", "", ""),
    Tuple.Create("Mean", "object", "bool skipNaN = true", ", skipNaN"),
    Tuple.Create("Median", "object", "bool skipNaN = true, bool isSorted = false", ", skipNaN, isSorted"),
    Tuple.Create("Mode", "object", "bool skipNaN = true", ", skipNaN"),
    Tuple.Create("Quantile", "object", "double p, bool skipNaN = true, bool isSorted = false", ", p, skipNaN, isSorted"),
	Tuple.Create("Skewness", "object","bool unbiased = true", ", unbiased"),
    Tuple.Create("StandardDeviation", "object", "bool unbiased = true, bool skipNaN = true", ", unbiased, skipNaN"),
    Tuple.Create("Std", "object", "bool unbiased = true, bool skipNaN = true", ", unbiased, skipNaN"),
    Tuple.Create("Variance", "object", "bool unbiased = true, bool skipNaN = true", ", unbiased, skipNaN"),
    Tuple.Create("Var", "object", "bool unbiased = true, bool skipNaN = true", ", unbiased, skipNaN"),
	Tuple.Create("SortFill", "void", "", "")
};
#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Horker.Numerics.DataMaps.Extensions;

namespace Horker.Numerics.DataMaps
{
    public partial class SeriesBase : IList
    {
<#   
foreach (var t in methodNames) {
#>
        public SeriesBase <#= t.Item1  #>(<#= t.Item2 #>)
        {
			var result = GenericIListExtensions.<#= t.Item1 #>((dynamic)UnderlyingList<#= t.Item3 #>);
            return new Series((IList)result);
        }

<#
}
foreach (var t in nonSeriesMethods) {
#>
        public <#= t.Item2 #> <#= t.Item1 #>(<#= t.Item3 #>)
        {
<# if (t.Item2 == "void") { #>
			GenericIListExtensions.<#= t.Item1 #>((dynamic)UnderlyingList<#= t.Item4 #>);
<# } else { #>
			return (<#= t.Item2 #>)GenericIListExtensions.<#= t.Item1 #>((dynamic)UnderlyingList<#= t.Item4 #>);
<# } #>
        }

<#
}
#>
	}
}
