<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#   
var methodNames = new[]
{
	// Elementwise operations and functions

	Tuple.Create("Abs", "", ""),
	Tuple.Create("Acos", "", ""),
	Tuple.Create("Asin", "", ""),
	Tuple.Create("Atan", "", ""),
	Tuple.Create("Atan2", "double x", ", x"),
	Tuple.Create("Ceiling", "", ""),
	Tuple.Create("Cos", "", ""),
	Tuple.Create("Exp", "", ""),
	Tuple.Create("Floor", "", ""),
	Tuple.Create("Log", "", ""),
	Tuple.Create("Log10", "", ""),
	Tuple.Create("Negate", "", ""),
	Tuple.Create("Pow", "double exp", ", exp"),
	Tuple.Create("Round", "int digits = 0, MidpointRounding mode = MidpointRounding.ToEven", ", digits, mode"),
	Tuple.Create("Sign", "", ""),
	Tuple.Create("Sin", "", ""),
	Tuple.Create("Sinh", "", ""),
	Tuple.Create("Sqrt", "", ""),
	Tuple.Create("Tan", "", ""),
	Tuple.Create("Tanh", "", ""),
	Tuple.Create("Truncate", "", ""),
	
	// Elementwise binary operations

	Tuple.Create("ElementAdd", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementAdd", "object other", ", (dynamic)other"),
	Tuple.Create("ElementSubtract", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementSubtract", "object other", ", (dynamic)other"),
	Tuple.Create("ElementMultiply", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementMultiply", "object other", ", (dynamic)other"),
	Tuple.Create("ElementDivide", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementDivide", "object other", ", (dynamic)other"),

	Tuple.Create("ElementAddR", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementAddR", "object other", ", (dynamic)other"),
	Tuple.Create("ElementSubtractR", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementSubtractR", "object other", ", (dynamic)other"),
	Tuple.Create("ElementMultiplyR", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementMultiplyR", "object other", ", (dynamic)other"),
	Tuple.Create("ElementDivideR", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementDivideR", "object other", ", (dynamic)other"),

	// Other operations

	Tuple.Create("Copy", "", ""),
	Tuple.Create("CreateLike", "", ""),
	Tuple.Create("CumulativeMax", "", ""),
	Tuple.Create("CumulativeMin", "", ""),
	Tuple.Create("CumulativeProduct", "", ""),
	Tuple.Create("CumulativeSum", "", ""),
	Tuple.Create("Fill", "object value", ", (dynamic)value"),
	Tuple.Create("Shuffle", "int seed = -1", ", seed"),
	Tuple.Create("SortedCopy", "", ""),
	Tuple.Create("FillNaN", "object fillValue", ", (dynamic)fillValue"),
	Tuple.Create("RemoveNaN", "", ""),
	Tuple.Create("Unique", "", ""),
};

var nonSeriesMethods = new[]
{
	// Elementwise unary operations and functions

	Tuple.Create("AbsFill", "void", "", ""),
	Tuple.Create("AcosFill", "void", "", ""),
	Tuple.Create("AsinFill", "void", "", ""),
	Tuple.Create("AtanFill", "void", "", ""),
	Tuple.Create("Atan2Fill", "void", "double x", ", x"),
	Tuple.Create("CeilingFill", "void", "", ""),
	Tuple.Create("CosFill", "void", "", ""),
	Tuple.Create("ExpFill", "void", "", ""),
	Tuple.Create("LogFill", "void", "", ""),
	Tuple.Create("Log10Fill", "void", "", ""),
	Tuple.Create("NegateFill", "void", "", ""),
	Tuple.Create("PowFill", "void", "double exp", ", exp"),
	Tuple.Create("SignFill", "void", "", ""),
	Tuple.Create("SinFill", "void", "", ""),
	Tuple.Create("SinhFill", "void", "", ""),
	Tuple.Create("SqrtFill", "void", "", ""),
	Tuple.Create("TanFill", "void", "", ""),
	Tuple.Create("TanhFill", "void", "", ""),
	Tuple.Create("TruncateFill", "void", "", ""),

	// Elementwise binary operations

	Tuple.Create("ElementAddFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementAddFill", "void", "object other", ", (dynamic)other"),
	Tuple.Create("ElementSubtractFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementSubtractFill", "void", "object other", ", (dynamic)other"),
	Tuple.Create("ElementMultiplyFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementMultiplyFill", "void", "object other", ", (dynamic)other"),
	Tuple.Create("ElementDivideFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementDivideFill", "void", "object other", ", (dynamic)other"),

	Tuple.Create("ElementAddRFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementAddRFill", "void", "object other", ", (dynamic)other"),
	Tuple.Create("ElementSubtractRFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementSubtractRFill", "void", "object other", ", (dynamic)other"),
	Tuple.Create("ElementMultiplyRFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementMultiplyRFill", "void", "object other", ", (dynamic)other"),
	Tuple.Create("ElementDivideRFill", "void", "SeriesBase other", ", (dynamic)other.UnderlyingList"),
	Tuple.Create("ElementDivideRFill", "void", "object other", ", (dynamic)other"),

	// Other operations

	Tuple.Create("Correlation", "object", "SeriesBase other, bool skipNaN = true", ", (dynamic)other.UnderlyingList, skipNaN"),
	Tuple.Create("Cor", "object", "SeriesBase other, bool skipNaN = true", ", (dynamic)other.UnderlyingList, skipNaN"),
	Tuple.Create("Covariance", "object", "SeriesBase other, bool unbiased = true, bool skipNaN = true", ", (dynamic)other.UnderlyingList, unbiased, skipNaN"),
	Tuple.Create("Cov", "object", "SeriesBase other, bool unbiased = true, bool skipNaN = true", ", (dynamic)other.UnderlyingList, unbiased, skipNaN"),
	Tuple.Create("CumulativeMaxFill", "void", "", ""),
	Tuple.Create("CumulativeMinFill", "void", "", ""),
	Tuple.Create("CumulativeProductFill", "void", "", ""),
	Tuple.Create("CumulativeSumFill", "void", "", ""),
	Tuple.Create("CountNaN", "int", "", ""),
	Tuple.Create("CountUnique", "int", "", ""),
	Tuple.Create("CountValues", "object", "", ""),
	Tuple.Create("Describe", "Summary", "", ""),
	Tuple.Create("FillFill", "void", "object value", ", (dynamic)value"),
	Tuple.Create("FillNaNFill", "void", "object fillValue", ", (dynamic)fillValue"),
	Tuple.Create("Histogram", "HistogramBin[]", "int binCount = -1, double binWidth = double.NaN", ", binCount, binWidth"),
	Tuple.Create("Kurtosis", "object","bool unbiased = true", ", unbiased"),
    Tuple.Create("Max", "object", "", ""),
    Tuple.Create("Min", "object", "", ""),
    Tuple.Create("Mean", "object", "bool skipNaN = true", ", skipNaN"),
    Tuple.Create("Median", "object", "bool skipNaN = true, bool isSorted = false", ", skipNaN, isSorted"),
    Tuple.Create("Mode", "object", "bool skipNaN = true", ", skipNaN"),
    Tuple.Create("Product", "object", "bool skipNaN = true, int minCount = 0", ", skipNaN, minCount"),
    Tuple.Create("Quantile", "object", "double p, bool skipNaN = true, bool isSorted = false", ", p, skipNaN, isSorted"),
	Tuple.Create("ShuffleFill", "void", "int seed = -1", ", seed"),
    Tuple.Create("Sum", "object", "bool skipNaN = true, int minCount = 0", ", skipNaN, minCount"),
	Tuple.Create("Skewness", "object","bool unbiased = true", ", unbiased"),
    Tuple.Create("StandardDeviation", "object", "bool unbiased = true, bool skipNaN = true", ", unbiased, skipNaN"),
    Tuple.Create("Std", "object", "bool unbiased = true, bool skipNaN = true", ", unbiased, skipNaN"),
    Tuple.Create("Variance", "object", "bool unbiased = true, bool skipNaN = true", ", unbiased, skipNaN"),
    Tuple.Create("Var", "object", "bool unbiased = true, bool skipNaN = true", ", unbiased, skipNaN"),
	Tuple.Create("SortFill", "void", "", "")
};
#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Horker.Numerics.DataMaps.Extensions;

namespace Horker.Numerics.DataMaps
{
    public partial class SeriesBase
    {
<#   
foreach (var t in methodNames) {
#>
        public SeriesBase <#= t.Item1  #>(<#= t.Item2 #>)
        {
			try
			{
				var result = GenericIListExtensions.<#= t.Item1 #>((dynamic)UnderlyingList<#= t.Item3 #>);
				return new Series((IList)result);
			}
			catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException)
			{
				throw new InvalidOperationException($"<#= t.Item1 #>() does not support data type {DataType}");
			}
        }

<#
}
foreach (var t in nonSeriesMethods) {
#>
        public <#= t.Item2 #> <#= t.Item1 #>(<#= t.Item3 #>)
        {
			try
			{
<# if (t.Item2 == "void") { #>
				GenericIListExtensions.<#= t.Item1 #>((dynamic)UnderlyingList<#= t.Item4 #>);
<# } else { #>
				return (<#= t.Item2 #>)GenericIListExtensions.<#= t.Item1 #>((dynamic)UnderlyingList<#= t.Item4 #>);
<# } #>
			}
			catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException)
			{
				throw new InvalidOperationException($"<#= t.Item1 #>() does not support data type {DataType}");
			}
        }

<#
}
#>
	}
}
